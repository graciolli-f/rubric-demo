[{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/app.tsx","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":4,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":8,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { TaskView } from './views/task-view';\n\nexport const App: React.FC = () => {\n  return (\n    <TaskView />\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/models/task.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 4. Maximum allowed is 0.","line":20,"column":16,"nodeType":"FunctionExpression","messageId":"complex","endLine":34,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Getter 'id' has a complexity of 1. Maximum allowed is 0.","line":36,"column":11,"nodeType":"FunctionExpression","messageId":"complex","endLine":36,"endColumn":42},{"ruleId":"complexity","severity":1,"message":"Getter 'title' has a complexity of 1. Maximum allowed is 0.","line":37,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":37,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Getter 'description' has a complexity of 1. Maximum allowed is 0.","line":38,"column":20,"nodeType":"FunctionExpression","messageId":"complex","endLine":38,"endColumn":60},{"ruleId":"complexity","severity":1,"message":"Getter 'completed' has a complexity of 1. Maximum allowed is 0.","line":39,"column":18,"nodeType":"FunctionExpression","messageId":"complex","endLine":39,"endColumn":57},{"ruleId":"complexity","severity":1,"message":"Getter 'syncStatus' has a complexity of 1. Maximum allowed is 0.","line":40,"column":19,"nodeType":"FunctionExpression","messageId":"complex","endLine":40,"endColumn":62},{"ruleId":"complexity","severity":1,"message":"Getter 'lastSyncError' has a complexity of 1. Maximum allowed is 0.","line":41,"column":22,"nodeType":"FunctionExpression","messageId":"complex","endLine":41,"endColumn":76},{"ruleId":"complexity","severity":1,"message":"Method 'toggle' has a complexity of 1. Maximum allowed is 0.","line":43,"column":11,"nodeType":"FunctionExpression","messageId":"complex","endLine":51,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Method 'updateTitle' has a complexity of 1. Maximum allowed is 0.","line":53,"column":16,"nodeType":"FunctionExpression","messageId":"complex","endLine":61,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Method 'updateDescription' has a complexity of 1. Maximum allowed is 0.","line":63,"column":22,"nodeType":"FunctionExpression","messageId":"complex","endLine":71,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Method 'withSyncStatus' has a complexity of 1. Maximum allowed is 0.","line":73,"column":19,"nodeType":"FunctionExpression","messageId":"complex","endLine":82,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type SyncStatus = 'synced' | 'syncing' | 'error' | 'pending';\n\nexport interface ITask {\n    id: string;\n    title: string;\n    description: string;\n    completed: boolean;\n    syncStatus?: SyncStatus;\n    lastSyncError?: string;\n  }\n  \n  export class TaskModel implements ITask {\n    private _id: string;          \n    private _title: string;\n    private _description: string;       \n    private _completed: boolean;\n    private _syncStatus: SyncStatus;\n    private _lastSyncError?: string;\n    \n    constructor(\n      id: string, \n      title: string, \n      description: string = '', \n      completed: boolean = false,\n      syncStatus: SyncStatus = 'pending',\n      lastSyncError?: string\n    ) {\n      this._id = id;\n      this._title = title;\n      this._description = description;\n      this._completed = completed;\n      this._syncStatus = syncStatus;\n      this._lastSyncError = lastSyncError;\n    }\n    \n    get id(): string { return this._id; }\n    get title(): string { return this._title; }\n    get description(): string { return this._description; }\n    get completed(): boolean { return this._completed; }\n    get syncStatus(): SyncStatus { return this._syncStatus; }\n    get lastSyncError(): string | undefined { return this._lastSyncError; }\n    \n    toggle(): TaskModel {\n      return new TaskModel(\n        this._id, \n        this._title, \n        this._description, \n        !this._completed, \n        'pending'\n      );\n    }\n\n    updateTitle(title: string): TaskModel {\n      return new TaskModel(\n        this._id,\n        title,\n        this._description,\n        this._completed,\n        'pending'\n      );\n    }\n\n    updateDescription(description: string): TaskModel {\n      return new TaskModel(\n        this._id,\n        this._title,\n        description,\n        this._completed,\n        'pending'\n      );\n    }\n\n    withSyncStatus(syncStatus: SyncStatus, error?: string): TaskModel {\n      return new TaskModel(\n        this._id,\n        this._title,\n        this._description,\n        this._completed,\n        syncStatus,\n        error\n      );\n    }\n  }","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/stores/commands.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 1. Maximum allowed is 0.","line":17,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":19,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 2. Maximum allowed is 0.","line":29,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":38,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'execute' has a complexity of 1. Maximum allowed is 0.","line":40,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":43,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 1. Maximum allowed is 0.","line":45,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":48,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getDescription' has a complexity of 1. Maximum allowed is 0.","line":50,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":52,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getTaskId' has a complexity of 1. Maximum allowed is 0.","line":54,"column":12,"nodeType":"FunctionExpression","messageId":"complex","endLine":56,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":61,"column":43,"nodeType":"Literal","messageId":"complex","endLine":61,"endColumn":47},{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 1. Maximum allowed is 0.","line":63,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":66,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'execute' has a complexity of 2. Maximum allowed is 0.","line":68,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":71,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 2. Maximum allowed is 0.","line":73,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":77,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getDescription' has a complexity of 3. Maximum allowed is 0.","line":79,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":81,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":86,"column":44,"nodeType":"Literal","messageId":"complex","endLine":86,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 1. Maximum allowed is 0.","line":88,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":91,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'execute' has a complexity of 3. Maximum allowed is 0.","line":93,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":99,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 2. Maximum allowed is 0.","line":101,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":105,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getDescription' has a complexity of 5. Maximum allowed is 0.","line":107,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":110,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":116,"column":44,"nodeType":"Literal","messageId":"complex","endLine":116,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 1. Maximum allowed is 0.","line":118,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":122,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'execute' has a complexity of 3. Maximum allowed is 0.","line":124,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":130,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 2. Maximum allowed is 0.","line":132,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":136,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getDescription' has a complexity of 3. Maximum allowed is 0.","line":138,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":140,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":146,"column":44,"nodeType":"Literal","messageId":"complex","endLine":146,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 1. Maximum allowed is 0.","line":148,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":152,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'execute' has a complexity of 3. Maximum allowed is 0.","line":154,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":160,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 2. Maximum allowed is 0.","line":162,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":166,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getDescription' has a complexity of 3. Maximum allowed is 0.","line":168,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":170,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TaskModel } from '../models/task';\n\nexport interface ICommand {\n  execute(): void;\n  undo(): void;\n  getDescription(): string;\n}\n\nexport interface TaskStoreState {\n  tasks: Map<string, TaskModel>;\n  nextId: number;\n}\n\nexport abstract class TaskCommand implements ICommand {\n  protected store: TaskStoreState;\n  \n  constructor(store: TaskStoreState) {\n    this.store = store;\n  }\n  \n  abstract execute(): void;\n  abstract undo(): void;\n  abstract getDescription(): string;\n}\n\nexport class AddTaskCommand extends TaskCommand {\n  private task: TaskModel;\n  \n  constructor(store: TaskStoreState, title: string, description: string = '') {\n    super(store);\n    this.task = new TaskModel(\n      `task_${store.nextId}`,\n      title,\n      description,\n      false,\n      'pending'\n    );\n  }\n  \n  execute(): void {\n    this.store.tasks.set(this.task.id, this.task);\n    this.store.nextId++;\n  }\n  \n  undo(): void {\n    this.store.tasks.delete(this.task.id);\n    this.store.nextId--;\n  }\n  \n  getDescription(): string {\n    return `Add task: ${this.task.title}`;\n  }\n  \n  getTaskId(): string {\n    return this.task.id;\n  }\n}\n\nexport class DeleteTaskCommand extends TaskCommand {\n  private taskId: string;\n  private deletedTask: TaskModel | null = null;\n  \n  constructor(store: TaskStoreState, taskId: string) {\n    super(store);\n    this.taskId = taskId;\n  }\n  \n  execute(): void {\n    this.deletedTask = this.store.tasks.get(this.taskId) || null;\n    this.store.tasks.delete(this.taskId);\n  }\n  \n  undo(): void {\n    if (this.deletedTask) {\n      this.store.tasks.set(this.taskId, this.deletedTask);\n    }\n  }\n  \n  getDescription(): string {\n    return `Delete task: ${this.deletedTask?.title || this.taskId}`;\n  }\n}\n\nexport class ToggleTaskCommand extends TaskCommand {\n  private taskId: string;\n  private originalTask: TaskModel | null = null;\n  \n  constructor(store: TaskStoreState, taskId: string) {\n    super(store);\n    this.taskId = taskId;\n  }\n  \n  execute(): void {\n    this.originalTask = this.store.tasks.get(this.taskId) || null;\n    if (this.originalTask) {\n      const toggledTask = this.originalTask.toggle();\n      this.store.tasks.set(this.taskId, toggledTask);\n    }\n  }\n  \n  undo(): void {\n    if (this.originalTask) {\n      this.store.tasks.set(this.taskId, this.originalTask);\n    }\n  }\n  \n  getDescription(): string {\n    const action = this.originalTask?.completed ? 'Mark incomplete' : 'Mark complete';\n    return `${action}: ${this.originalTask?.title || this.taskId}`;\n  }\n}\n\nexport class UpdateTaskTitleCommand extends TaskCommand {\n  private taskId: string;\n  private newTitle: string;\n  private originalTask: TaskModel | null = null;\n  \n  constructor(store: TaskStoreState, taskId: string, newTitle: string) {\n    super(store);\n    this.taskId = taskId;\n    this.newTitle = newTitle;\n  }\n  \n  execute(): void {\n    this.originalTask = this.store.tasks.get(this.taskId) || null;\n    if (this.originalTask) {\n      const updatedTask = this.originalTask.updateTitle(this.newTitle);\n      this.store.tasks.set(this.taskId, updatedTask);\n    }\n  }\n  \n  undo(): void {\n    if (this.originalTask) {\n      this.store.tasks.set(this.taskId, this.originalTask);\n    }\n  }\n  \n  getDescription(): string {\n    return `Update title: ${this.originalTask?.title || this.taskId} → ${this.newTitle}`;\n  }\n}\n\nexport class UpdateTaskDescriptionCommand extends TaskCommand {\n  private taskId: string;\n  private newDescription: string;\n  private originalTask: TaskModel | null = null;\n  \n  constructor(store: TaskStoreState, taskId: string, newDescription: string) {\n    super(store);\n    this.taskId = taskId;\n    this.newDescription = newDescription;\n  }\n  \n  execute(): void {\n    this.originalTask = this.store.tasks.get(this.taskId) || null;\n    if (this.originalTask) {\n      const updatedTask = this.originalTask.updateDescription(this.newDescription);\n      this.store.tasks.set(this.taskId, updatedTask);\n    }\n  }\n  \n  undo(): void {\n    if (this.originalTask) {\n      this.store.tasks.set(this.taskId, this.originalTask);\n    }\n  }\n  \n  getDescription(): string {\n    return `Update description: ${this.originalTask?.title || this.taskId}`;\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/stores/task-store.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":17,"column":44,"nodeType":"NewExpression","messageId":"complex","endLine":17,"endColumn":53},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":18,"column":41,"nodeType":"NewExpression","messageId":"complex","endLine":18,"endColumn":50},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":19,"column":29,"nodeType":"Literal","messageId":"complex","endLine":19,"endColumn":30},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":20,"column":60,"nodeType":"NewExpression","messageId":"complex","endLine":20,"endColumn":69},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":23,"column":34,"nodeType":"ArrayExpression","messageId":"complex","endLine":23,"endColumn":36},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":24,"column":36,"nodeType":"ArrayExpression","messageId":"complex","endLine":24,"endColumn":38},{"ruleId":"complexity","severity":1,"message":"Getter 'tasks' has a complexity of 1. Maximum allowed is 0.","line":27,"column":12,"nodeType":"FunctionExpression","messageId":"complex","endLine":27,"endColumn":62},{"ruleId":"complexity","severity":1,"message":"Getter 'nextId' has a complexity of 1. Maximum allowed is 0.","line":28,"column":13,"nodeType":"FunctionExpression","messageId":"complex","endLine":28,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Setter 'nextId' has a complexity of 1. Maximum allowed is 0.","line":29,"column":13,"nodeType":"FunctionExpression","messageId":"complex","endLine":29,"endColumn":54},{"ruleId":"complexity","severity":1,"message":"Method '_logTaskOperation' has a complexity of 1. Maximum allowed is 0.","line":31,"column":28,"nodeType":"FunctionExpression","messageId":"complex","endLine":34,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method '_executeCommand' has a complexity of 2. Maximum allowed is 0.","line":37,"column":26,"nodeType":"FunctionExpression","messageId":"complex","endLine":50,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'canUndo' has a complexity of 1. Maximum allowed is 0.","line":53,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":55,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'canRedo' has a complexity of 1. Maximum allowed is 0.","line":57,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":59,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 3. Maximum allowed is 0.","line":61,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":75,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'redo' has a complexity of 2. Maximum allowed is 0.","line":77,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":86,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getLastOperation' has a complexity of 2. Maximum allowed is 0.","line":88,"column":19,"nodeType":"FunctionExpression","messageId":"complex","endLine":91,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getNextRedoOperation' has a complexity of 2. Maximum allowed is 0.","line":93,"column":23,"nodeType":"FunctionExpression","messageId":"complex","endLine":96,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Async method '_syncTaskToAPI' has a complexity of 4. Maximum allowed is 0.","line":99,"column":31,"nodeType":"FunctionExpression","messageId":"complex","endLine":131,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method '_scheduleAutoSave' has a complexity of 2. Maximum allowed is 0.","line":133,"column":28,"nodeType":"FunctionExpression","messageId":"complex","endLine":150,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 0.","line":141,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":147,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Async method '_autoSaveTask' has a complexity of 2. Maximum allowed is 0.","line":152,"column":30,"nodeType":"FunctionExpression","messageId":"complex","endLine":163,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'addTask' has a complexity of 2. Maximum allowed is 0.","line":165,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":176,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'updateTaskTitle' has a complexity of 3. Maximum allowed is 0.","line":178,"column":18,"nodeType":"FunctionExpression","messageId":"complex","endLine":188,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'updateTaskDescription' has a complexity of 3. Maximum allowed is 0.","line":190,"column":24,"nodeType":"FunctionExpression","messageId":"complex","endLine":200,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'toggleTask' has a complexity of 2. Maximum allowed is 0.","line":202,"column":13,"nodeType":"FunctionExpression","messageId":"complex","endLine":212,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'deleteTask' has a complexity of 3. Maximum allowed is 0.","line":214,"column":13,"nodeType":"FunctionExpression","messageId":"complex","endLine":227,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Async method 'retrySyncTask' has a complexity of 3. Maximum allowed is 0.","line":230,"column":22,"nodeType":"FunctionExpression","messageId":"complex","endLine":235,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getTasks' has a complexity of 1. Maximum allowed is 0.","line":237,"column":11,"nodeType":"FunctionExpression","messageId":"complex","endLine":246,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":238,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":245,"endColumn":7},{"ruleId":"complexity","severity":1,"message":"Method 'subscribe' has a complexity of 1. Maximum allowed is 0.","line":248,"column":12,"nodeType":"FunctionExpression","messageId":"complex","endLine":251,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":250,"column":12,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":250,"endColumn":50},{"ruleId":"complexity","severity":1,"message":"Method '_generateId' has a complexity of 1. Maximum allowed is 0.","line":253,"column":22,"nodeType":"FunctionExpression","messageId":"complex","endLine":255,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method '_notifyListeners' has a complexity of 1. Maximum allowed is 0.","line":257,"column":27,"nodeType":"FunctionExpression","messageId":"complex","endLine":259,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":258,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":258,"endColumn":51},{"ruleId":"complexity","severity":1,"message":"Method 'cleanup' has a complexity of 1. Maximum allowed is 0.","line":262,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":265,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":263,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":263,"endColumn":68}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TaskModel, ITask, SyncStatus } from '../models/task';\nimport { \n  ICommand, \n  TaskStoreState, \n  AddTaskCommand, \n  DeleteTaskCommand, \n  ToggleTaskCommand, \n  UpdateTaskTitleCommand, \n  UpdateTaskDescriptionCommand \n} from './commands';\n\nconst API_BASE_URL = 'https://api.example.com/tasks';\nconst AUTO_SAVE_DEBOUNCE_MS = 1000; // 1 second debounce\nconst MAX_HISTORY_SIZE = 10; // Maximum number of operations to keep for undo\n\nexport class TaskStore implements TaskStoreState {\n  private _tasks: Map<string, TaskModel> = new Map();     \n  private _listeners: Set<() => void> = new Set();       \n  private _nextId: number = 1;\n  private _autoSaveTimeouts: Map<string, NodeJS.Timeout> = new Map();\n  \n  // Undo/Redo functionality\n  private _history: ICommand[] = [];\n  private _redoStack: ICommand[] = [];\n\n  // Expose state for commands\n  get tasks(): Map<string, TaskModel> { return this._tasks; }\n  get nextId(): number { return this._nextId; }\n  set nextId(value: number) { this._nextId = value; }\n\n  private _logTaskOperation(action: string, taskId: string): void {\n    const timestamp = new Date().toISOString();\n    console.log(`[${timestamp}] Action: ${action} Task: ${taskId}`);\n  }\n\n  // Command execution with history management\n  private _executeCommand(command: ICommand): void {\n    command.execute();\n    \n    // Add to history and maintain max size\n    this._history.push(command);\n    if (this._history.length > MAX_HISTORY_SIZE) {\n      this._history.shift(); // Remove oldest command\n    }\n    \n    // Clear redo stack when new command is executed\n    this._redoStack = [];\n    \n    this._notifyListeners();\n  }\n\n  // Undo/Redo methods\n  canUndo(): boolean {\n    return this._history.length > 0;\n  }\n\n  canRedo(): boolean {\n    return this._redoStack.length > 0;\n  }\n\n  undo(): boolean {\n    if (!this.canUndo()) return false;\n    \n    const command = this._history.pop()!;\n    command.undo();\n    this._redoStack.push(command);\n    \n    // Maintain max redo stack size\n    if (this._redoStack.length > MAX_HISTORY_SIZE) {\n      this._redoStack.shift();\n    }\n    \n    this._notifyListeners();\n    return true;\n  }\n\n  redo(): boolean {\n    if (!this.canRedo()) return false;\n    \n    const command = this._redoStack.pop()!;\n    command.execute();\n    this._history.push(command);\n    \n    this._notifyListeners();\n    return true;\n  }\n\n  getLastOperation(): string | null {\n    if (this._history.length === 0) return null;\n    return this._history[this._history.length - 1].getDescription();\n  }\n\n  getNextRedoOperation(): string | null {\n    if (this._redoStack.length === 0) return null;\n    return this._redoStack[this._redoStack.length - 1].getDescription();\n  }\n\n  // API sync methods\n  private async _syncTaskToAPI(task: TaskModel): Promise<void> {\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          id: task.id,\n          title: task.title,\n          description: task.description,\n          completed: task.completed,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // Update sync status to synced\n      const syncedTask = task.withSyncStatus('synced');\n      this._tasks.set(task.id, syncedTask);\n      this._logTaskOperation('synced', task.id);\n      this._notifyListeners();\n    } catch (error) {\n      console.error('Sync failed:', error);\n      // Update sync status to error\n      const errorTask = task.withSyncStatus('error', error instanceof Error ? error.message : 'Sync failed');\n      this._tasks.set(task.id, errorTask);\n      this._logTaskOperation('sync_error', task.id);\n      this._notifyListeners();\n    }\n  }\n\n  private _scheduleAutoSave(taskId: string): void {\n    // Clear existing timeout for this task\n    const existingTimeout = this._autoSaveTimeouts.get(taskId);\n    if (existingTimeout) {\n      clearTimeout(existingTimeout);\n    }\n\n    // Schedule new auto-save\n    const timeout = setTimeout(() => {\n      const task = this._tasks.get(taskId);\n      if (task && task.syncStatus === 'pending') {\n        this._autoSaveTask(taskId);\n      }\n      this._autoSaveTimeouts.delete(taskId);\n    }, AUTO_SAVE_DEBOUNCE_MS);\n\n    this._autoSaveTimeouts.set(taskId, timeout);\n  }\n\n  private async _autoSaveTask(taskId: string): Promise<void> {\n    const task = this._tasks.get(taskId);\n    if (!task) return;\n\n    // Set syncing status\n    const syncingTask = task.withSyncStatus('syncing');\n    this._tasks.set(taskId, syncingTask);\n    this._logTaskOperation('auto_sync_start', taskId);\n    this._notifyListeners();\n\n    await this._syncTaskToAPI(syncingTask);\n  }\n\n  addTask(title: string, description: string = ''): ITask {\n    const command = new AddTaskCommand(this, title, description);\n    this._executeCommand(command);\n    \n    const taskId = (command as AddTaskCommand).getTaskId();\n    this._logTaskOperation('create', taskId);\n    \n    // Schedule auto-save for new task\n    this._scheduleAutoSave(taskId);\n    \n    return this._tasks.get(taskId)!; \n  }\n\n  updateTaskTitle(id: string, title: string): void {\n    const task = this._tasks.get(id);\n    if (task && task.title !== title) {\n      const command = new UpdateTaskTitleCommand(this, id, title);\n      this._executeCommand(command);\n      this._logTaskOperation('update_title', id);\n      \n      // Schedule auto-save\n      this._scheduleAutoSave(id);\n    }\n  }\n\n  updateTaskDescription(id: string, description: string): void {\n    const task = this._tasks.get(id);\n    if (task && task.description !== description) {\n      const command = new UpdateTaskDescriptionCommand(this, id, description);\n      this._executeCommand(command);\n      this._logTaskOperation('update_description', id);\n      \n      // Schedule auto-save\n      this._scheduleAutoSave(id);\n    }\n  }\n\n  toggleTask(id: string): void {\n    const task = this._tasks.get(id);\n    if (task) {\n      const command = new ToggleTaskCommand(this, id);\n      this._executeCommand(command);\n      this._logTaskOperation('toggle', id);\n      \n      // Schedule auto-save\n      this._scheduleAutoSave(id);\n    }\n  }\n\n  deleteTask(id: string): void {\n    if (this._tasks.has(id)) {\n      // Clear any pending auto-save\n      const existingTimeout = this._autoSaveTimeouts.get(id);\n      if (existingTimeout) {\n        clearTimeout(existingTimeout);\n        this._autoSaveTimeouts.delete(id);\n      }\n      \n      const command = new DeleteTaskCommand(this, id);\n      this._executeCommand(command);\n      this._logTaskOperation('delete', id);\n    }\n  }\n\n  // Manual sync for retry functionality\n  async retrySyncTask(id: string): Promise<void> {\n    const task = this._tasks.get(id);\n    if (task && task.syncStatus === 'error') {\n      await this._autoSaveTask(id);\n    }\n  }\n\n  getTasks(): ITask[] {\n    return Array.from(this._tasks.values()).map(task => ({\n      id: task.id,\n      title: task.title,\n      description: task.description,\n      completed: task.completed,\n      syncStatus: task.syncStatus,\n      lastSyncError: task.lastSyncError\n    }));\n  }\n\n  subscribe(listener: () => void): () => void {\n    this._listeners.add(listener);\n    return () => this._listeners.delete(listener);\n  }\n\n  private _generateId(): string {\n    return `task_${this._nextId++}`;\n  }\n\n  private _notifyListeners(): void {\n    this._listeners.forEach(listener => listener());\n  }\n\n  // Cleanup method for component unmount\n  cleanup(): void {\n    this._autoSaveTimeouts.forEach(timeout => clearTimeout(timeout));\n    this._autoSaveTimeouts.clear();\n  }\n}\n\nexport const taskStore = new TaskStore();","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/views/task-view.tsx","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 8. Maximum allowed is 0.","line":12,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":389,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":22,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":24,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":26,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":40,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":27,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":33,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":36,"column":12,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":39,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":43,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":63,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 12. Maximum allowed is 0.","line":44,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":56,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":60,"column":12,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":62,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":65,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":72,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":74,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":76,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":78,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":80,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":82,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":86,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":88,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":90,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":92,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":94,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":96,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":98,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":100,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":102,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":104,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":112,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":105,"column":16,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":111,"endColumn":7},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":114,"column":23,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":122,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":115,"column":16,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":121,"endColumn":7},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 5. Maximum allowed is 0.","line":124,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":132,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 5. Maximum allowed is 0.","line":134,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":142,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":204,"column":23,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":204,"endColumn":61},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":212,"column":23,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":212,"endColumn":67},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 14. Maximum allowed is 0.","line":221,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":385,"endColumn":10},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":234,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":234,"endColumn":56},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":248,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":251,"endColumn":22},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 0.","line":252,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":259,"endColumn":22},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":270,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":270,"endColumn":66},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":285,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":285,"endColumn":89},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":291,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":291,"endColumn":55},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":319,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":322,"endColumn":18},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 4. Maximum allowed is 0.","line":323,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":330,"endColumn":18},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":347,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":347,"endColumn":70},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":366,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":366,"endColumn":68}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { taskStore } from '../stores/task-store';\nimport { SyncStatus } from '../models/task';\n\ninterface EditingState {\n  [taskId: string]: {\n    title?: boolean;\n    description?: boolean;\n  };\n}\n\nexport const TaskView: React.FC = () => {\n  const [tasks, setTasks] = useState(taskStore.getTasks());\n  const [newTaskTitle, setNewTaskTitle] = useState('');\n  const [newTaskDescription, setNewTaskDescription] = useState('');\n  const [editing, setEditing] = useState<EditingState>({});\n  const [canUndo, setCanUndo] = useState(taskStore.canUndo());\n  const [canRedo, setCanRedo] = useState(taskStore.canRedo());\n  const [lastOperation, setLastOperation] = useState(taskStore.getLastOperation());\n  const [nextRedoOperation, setNextRedoOperation] = useState(taskStore.getNextRedoOperation());\n  \n  const _isValidTitle = (title: string): boolean => {\n    return title.trim().length > 0 && title.trim().length < 100;\n  };\n\n  useEffect(() => {\n    const unsubscribe = taskStore.subscribe(() => {\n      setTasks(taskStore.getTasks());\n      setCanUndo(taskStore.canUndo());\n      setCanRedo(taskStore.canRedo());\n      setLastOperation(taskStore.getLastOperation());\n      setNextRedoOperation(taskStore.getNextRedoOperation());\n    });\n\n    // Cleanup on unmount\n    return () => {\n      unsubscribe();\n      taskStore.cleanup();\n    };\n  }, []);\n\n  // Separate useEffect for keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === 'z' && !e.shiftKey) {\n        e.preventDefault();\n        if (taskStore.canUndo()) {\n          taskStore.undo();\n        }\n      } else if ((e.metaKey || e.ctrlKey) && (e.key === 'y' || (e.key === 'z' && e.shiftKey))) {\n        e.preventDefault();\n        if (taskStore.canRedo()) {\n          taskStore.redo();\n        }\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (_isValidTitle(newTaskTitle)) {\n      taskStore.addTask(newTaskTitle.trim(), newTaskDescription.trim());\n      setNewTaskTitle('');\n      setNewTaskDescription('');\n    }\n  };\n\n  const handleToggle = (id: string) => {\n    taskStore.toggleTask(id);\n  };\n\n  const handleDelete = (id: string) => {\n    taskStore.deleteTask(id);\n  };\n\n  const handleTitleEdit = (id: string, newTitle: string) => {\n    if (_isValidTitle(newTitle)) {\n      taskStore.updateTaskTitle(id, newTitle);\n    }\n  };\n\n  const handleDescriptionEdit = (id: string, newDescription: string) => {\n    taskStore.updateTaskDescription(id, newDescription);\n  };\n\n  const handleRetrySync = (id: string) => {\n    taskStore.retrySyncTask(id);\n  };\n\n  const handleUndo = () => {\n    taskStore.undo();\n  };\n\n  const handleRedo = () => {\n    taskStore.redo();\n  };\n\n  const startEditing = (taskId: string, field: 'title' | 'description') => {\n    setEditing(prev => ({\n      ...prev,\n      [taskId]: {\n        ...prev[taskId],\n        [field]: true\n      }\n    }));\n  };\n\n  const stopEditing = (taskId: string, field: 'title' | 'description') => {\n    setEditing(prev => ({\n      ...prev,\n      [taskId]: {\n        ...prev[taskId],\n        [field]: false\n      }\n    }));\n  };\n\n  const getSyncStatusIcon = (syncStatus?: SyncStatus): string => {\n    switch (syncStatus) {\n      case 'synced': return '✅';\n      case 'syncing': return '🔄';\n      case 'error': return '❌';\n      case 'pending': return '⏳';\n      default: return '⏳';\n    }\n  };\n\n  const getSyncStatusColor = (syncStatus?: SyncStatus): string => {\n    switch (syncStatus) {\n      case 'synced': return '#28a745';\n      case 'syncing': return '#007bff';\n      case 'error': return '#dc3545';\n      case 'pending': return '#ffc107';\n      default: return '#ffc107';\n    }\n  };\n\n  return (\n    <div className=\"task-view\">\n      <h1>Tasks</h1>\n      \n      {/* Undo/Redo Controls */}\n      <div style={{ \n        marginBottom: '20px', \n        padding: '10px', \n        backgroundColor: '#f8f9fa', \n        borderRadius: '5px',\n        display: 'flex',\n        gap: '10px',\n        alignItems: 'center'\n      }}>\n        <button \n          onClick={handleUndo}\n          disabled={!canUndo}\n          style={{\n            backgroundColor: canUndo ? '#007bff' : '#6c757d',\n            color: 'white',\n            border: 'none',\n            borderRadius: '3px',\n            padding: '6px 12px',\n            fontSize: '14px',\n            cursor: canUndo ? 'pointer' : 'not-allowed'\n          }}\n          title={lastOperation ? `Undo: ${lastOperation}` : 'Nothing to undo'}\n        >\n          ↶ Undo\n        </button>\n        \n        <button \n          onClick={handleRedo}\n          disabled={!canRedo}\n          style={{\n            backgroundColor: canRedo ? '#28a745' : '#6c757d',\n            color: 'white',\n            border: 'none',\n            borderRadius: '3px',\n            padding: '6px 12px',\n            fontSize: '14px',\n            cursor: canRedo ? 'pointer' : 'not-allowed'\n          }}\n          title={nextRedoOperation ? `Redo: ${nextRedoOperation}` : 'Nothing to redo'}\n        >\n          ↷ Redo\n        </button>\n        \n        {lastOperation && (\n          <span style={{ fontSize: '12px', color: '#6c757d' }}>\n            Last: {lastOperation}\n          </span>\n        )}\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <div>\n          <input\n            type=\"text\"\n            value={newTaskTitle}\n            onChange={(e) => setNewTaskTitle(e.target.value)}\n            placeholder=\"Add a new task...\"\n            required\n          />\n        </div>\n        <div>\n          <textarea\n            value={newTaskDescription}\n            onChange={(e) => setNewTaskDescription(e.target.value)}\n            placeholder=\"Task description (optional)...\"\n            rows={3}\n          />\n        </div>\n        <button type=\"submit\">Add</button>\n      </form>\n\n      <ul>\n        {tasks.map(task => (\n          <li key={task.id} style={{ \n            marginBottom: '15px', \n            padding: '10px', \n            border: '1px solid #ddd', \n            borderRadius: '5px',\n            borderLeft: `4px solid ${getSyncStatusColor(task.syncStatus)}`\n          }}>\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n              <label style={{ flex: 1 }}>\n                <input\n                  type=\"checkbox\"\n                  checked={task.completed}\n                  onChange={() => handleToggle(task.id)}\n                />\n                \n                {editing[task.id]?.title ? (\n                  <input\n                    type=\"text\"\n                    defaultValue={task.title}\n                    style={{\n                      marginLeft: '8px',\n                      fontWeight: 'bold',\n                      border: '1px solid #ddd',\n                      borderRadius: '3px',\n                      padding: '2px 4px'\n                    }}\n                    onBlur={(e) => {\n                      handleTitleEdit(task.id, e.target.value);\n                      stopEditing(task.id, 'title');\n                    }}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        handleTitleEdit(task.id, e.currentTarget.value);\n                        stopEditing(task.id, 'title');\n                      } else if (e.key === 'Escape') {\n                        stopEditing(task.id, 'title');\n                      }\n                    }}\n                    autoFocus\n                  />\n                ) : (\n                  <span \n                    style={{\n                      textDecoration: task.completed ? 'line-through' : 'none',\n                      fontWeight: 'bold',\n                      marginLeft: '8px',\n                      cursor: 'pointer'\n                    }}\n                    onClick={() => startEditing(task.id, 'title')}\n                    title=\"Click to edit\"\n                  >\n                    {task.title}\n                  </span>\n                )}\n              </label>\n              \n              <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                <span \n                  style={{ \n                    fontSize: '16px',\n                    cursor: task.syncStatus === 'error' ? 'pointer' : 'default'\n                  }}\n                  title={task.syncStatus === 'error' ? `Error: ${task.lastSyncError}. Click to retry.` : `Status: ${task.syncStatus}`}\n                  onClick={() => task.syncStatus === 'error' && handleRetrySync(task.id)}\n                >\n                  {getSyncStatusIcon(task.syncStatus)}\n                </span>\n                \n                <button \n                  onClick={() => handleDelete(task.id)}\n                  style={{\n                    backgroundColor: '#ff4444',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '3px',\n                    padding: '4px 8px',\n                    fontSize: '12px',\n                    cursor: 'pointer'\n                  }}\n                >\n                  Delete\n                </button>\n              </div>\n            </div>\n            \n            {editing[task.id]?.description ? (\n              <textarea\n                defaultValue={task.description}\n                style={{\n                  marginTop: '5px',\n                  marginLeft: '24px',\n                  width: 'calc(100% - 24px)',\n                  minHeight: '60px',\n                  border: '1px solid #ddd',\n                  borderRadius: '3px',\n                  padding: '4px'\n                }}\n                onBlur={(e) => {\n                  handleDescriptionEdit(task.id, e.target.value);\n                  stopEditing(task.id, 'description');\n                }}\n                onKeyDown={(e) => {\n                  if (e.key === 'Escape') {\n                    stopEditing(task.id, 'description');\n                  } else if (e.key === 'Enter' && e.ctrlKey) {\n                    handleDescriptionEdit(task.id, e.currentTarget.value);\n                    stopEditing(task.id, 'description');\n                  }\n                }}\n                autoFocus\n              />\n            ) : (\n              task.description && (\n                <div \n                  style={{\n                    marginTop: '5px',\n                    marginLeft: '24px',\n                    color: '#666',\n                    fontSize: '14px',\n                    textDecoration: task.completed ? 'line-through' : 'none',\n                    cursor: 'pointer',\n                    padding: '2px 4px',\n                    borderRadius: '3px',\n                    backgroundColor: '#f8f9fa'\n                  }}\n                  onClick={() => startEditing(task.id, 'description')}\n                  title=\"Click to edit\"\n                >\n                  {task.description}\n                </div>\n              )\n            )}\n            \n            {!task.description && !editing[task.id]?.description && (\n              <div \n                style={{\n                  marginTop: '5px',\n                  marginLeft: '24px',\n                  color: '#999',\n                  fontSize: '14px',\n                  fontStyle: 'italic',\n                  cursor: 'pointer',\n                  padding: '2px 4px'\n                }}\n                onClick={() => startEditing(task.id, 'description')}\n                title=\"Click to add description\"\n              >\n                + Add description\n              </div>\n            )}\n\n            {task.syncStatus === 'error' && (\n              <div style={{\n                marginTop: '5px',\n                marginLeft: '24px',\n                color: '#dc3545',\n                fontSize: '12px',\n                fontStyle: 'italic'\n              }}>\n                Sync failed: {task.lastSyncError}\n              </div>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};","usedDeprecatedRules":[]}]
