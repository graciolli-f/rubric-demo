[{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/app.tsx","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":7,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":11,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { TaskView } from './views/task-view';\n\n// Import sample data utilities for development testing\nimport './utils/populate-sample-data';\n\nexport const App: React.FC = () => {\n  return (\n    <TaskView />\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/hooks/use-debounced-search.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'useDebouncedSearch' has a complexity of 3. Maximum allowed is 0.","line":3,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":25,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":10,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":18,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":11,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":13,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":15,"column":12,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":17,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":20,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":22,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\n\nexport function useDebouncedSearch(\n  initialValue: string = '',\n  delay: number = 300\n): [string, string, (value: string) => void] {\n  const [inputValue, setInputValue] = useState(initialValue);\n  const [debouncedValue, setDebouncedValue] = useState(initialValue);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(inputValue);\n    }, delay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [inputValue, delay]);\n\n  const handleChange = useCallback((value: string) => {\n    setInputValue(value);\n  }, []);\n\n  return [inputValue, debouncedValue, handleChange];\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/models/task.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 4. Maximum allowed is 0.","line":20,"column":16,"nodeType":"FunctionExpression","messageId":"complex","endLine":34,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Getter 'id' has a complexity of 1. Maximum allowed is 0.","line":36,"column":11,"nodeType":"FunctionExpression","messageId":"complex","endLine":36,"endColumn":42},{"ruleId":"complexity","severity":1,"message":"Getter 'title' has a complexity of 1. Maximum allowed is 0.","line":37,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":37,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Getter 'description' has a complexity of 1. Maximum allowed is 0.","line":38,"column":20,"nodeType":"FunctionExpression","messageId":"complex","endLine":38,"endColumn":60},{"ruleId":"complexity","severity":1,"message":"Getter 'completed' has a complexity of 1. Maximum allowed is 0.","line":39,"column":18,"nodeType":"FunctionExpression","messageId":"complex","endLine":39,"endColumn":57},{"ruleId":"complexity","severity":1,"message":"Getter 'syncStatus' has a complexity of 1. Maximum allowed is 0.","line":40,"column":19,"nodeType":"FunctionExpression","messageId":"complex","endLine":40,"endColumn":62},{"ruleId":"complexity","severity":1,"message":"Getter 'lastSyncError' has a complexity of 1. Maximum allowed is 0.","line":41,"column":22,"nodeType":"FunctionExpression","messageId":"complex","endLine":41,"endColumn":76},{"ruleId":"complexity","severity":1,"message":"Method 'toggle' has a complexity of 1. Maximum allowed is 0.","line":43,"column":11,"nodeType":"FunctionExpression","messageId":"complex","endLine":51,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Method 'updateTitle' has a complexity of 1. Maximum allowed is 0.","line":53,"column":16,"nodeType":"FunctionExpression","messageId":"complex","endLine":61,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Method 'updateDescription' has a complexity of 1. Maximum allowed is 0.","line":63,"column":22,"nodeType":"FunctionExpression","messageId":"complex","endLine":71,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Method 'withSyncStatus' has a complexity of 1. Maximum allowed is 0.","line":73,"column":19,"nodeType":"FunctionExpression","messageId":"complex","endLine":82,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type SyncStatus = 'synced' | 'syncing' | 'error' | 'pending';\n\nexport interface ITask {\n    id: string;\n    title: string;\n    description: string;\n    completed: boolean;\n    syncStatus?: SyncStatus;\n    lastSyncError?: string;\n  }\n  \n  export class TaskModel implements ITask {\n    private _id: string;          \n    private _title: string;\n    private _description: string;       \n    private _completed: boolean;\n    private _syncStatus: SyncStatus;\n    private _lastSyncError?: string;\n    \n    constructor(\n      id: string, \n      title: string, \n      description: string = '', \n      completed: boolean = false,\n      syncStatus: SyncStatus = 'pending',\n      lastSyncError?: string\n    ) {\n      this._id = id;\n      this._title = title;\n      this._description = description;\n      this._completed = completed;\n      this._syncStatus = syncStatus;\n      this._lastSyncError = lastSyncError;\n    }\n    \n    get id(): string { return this._id; }\n    get title(): string { return this._title; }\n    get description(): string { return this._description; }\n    get completed(): boolean { return this._completed; }\n    get syncStatus(): SyncStatus { return this._syncStatus; }\n    get lastSyncError(): string | undefined { return this._lastSyncError; }\n    \n    toggle(): TaskModel {\n      return new TaskModel(\n        this._id, \n        this._title, \n        this._description, \n        !this._completed, \n        'pending'\n      );\n    }\n\n    updateTitle(title: string): TaskModel {\n      return new TaskModel(\n        this._id,\n        title,\n        this._description,\n        this._completed,\n        'pending'\n      );\n    }\n\n    updateDescription(description: string): TaskModel {\n      return new TaskModel(\n        this._id,\n        this._title,\n        description,\n        this._completed,\n        'pending'\n      );\n    }\n\n    withSyncStatus(syncStatus: SyncStatus, error?: string): TaskModel {\n      return new TaskModel(\n        this._id,\n        this._title,\n        this._description,\n        this._completed,\n        syncStatus,\n        error\n      );\n    }\n  }","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/stores/commands.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 1. Maximum allowed is 0.","line":17,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":19,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 2. Maximum allowed is 0.","line":29,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":38,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'execute' has a complexity of 1. Maximum allowed is 0.","line":40,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":43,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 1. Maximum allowed is 0.","line":45,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":48,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getDescription' has a complexity of 1. Maximum allowed is 0.","line":50,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":52,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getTaskId' has a complexity of 1. Maximum allowed is 0.","line":54,"column":12,"nodeType":"FunctionExpression","messageId":"complex","endLine":56,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":61,"column":43,"nodeType":"Literal","messageId":"complex","endLine":61,"endColumn":47},{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 1. Maximum allowed is 0.","line":63,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":66,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'execute' has a complexity of 2. Maximum allowed is 0.","line":68,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":71,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 2. Maximum allowed is 0.","line":73,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":77,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getDescription' has a complexity of 3. Maximum allowed is 0.","line":79,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":81,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":86,"column":44,"nodeType":"Literal","messageId":"complex","endLine":86,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 1. Maximum allowed is 0.","line":88,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":91,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'execute' has a complexity of 3. Maximum allowed is 0.","line":93,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":99,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 2. Maximum allowed is 0.","line":101,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":105,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getDescription' has a complexity of 5. Maximum allowed is 0.","line":107,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":110,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":116,"column":44,"nodeType":"Literal","messageId":"complex","endLine":116,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 1. Maximum allowed is 0.","line":118,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":122,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'execute' has a complexity of 3. Maximum allowed is 0.","line":124,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":130,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 2. Maximum allowed is 0.","line":132,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":136,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getDescription' has a complexity of 3. Maximum allowed is 0.","line":138,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":140,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":146,"column":44,"nodeType":"Literal","messageId":"complex","endLine":146,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 1. Maximum allowed is 0.","line":148,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":152,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'execute' has a complexity of 3. Maximum allowed is 0.","line":154,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":160,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 2. Maximum allowed is 0.","line":162,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":166,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getDescription' has a complexity of 3. Maximum allowed is 0.","line":168,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":170,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TaskModel } from '../models/task';\n\nexport interface ICommand {\n  execute(): void;\n  undo(): void;\n  getDescription(): string;\n}\n\nexport interface TaskStoreState {\n  tasks: Map<string, TaskModel>;\n  nextId: number;\n}\n\nexport abstract class TaskCommand implements ICommand {\n  protected store: TaskStoreState;\n  \n  constructor(store: TaskStoreState) {\n    this.store = store;\n  }\n  \n  abstract execute(): void;\n  abstract undo(): void;\n  abstract getDescription(): string;\n}\n\nexport class AddTaskCommand extends TaskCommand {\n  private task: TaskModel;\n  \n  constructor(store: TaskStoreState, title: string, description: string = '') {\n    super(store);\n    this.task = new TaskModel(\n      `task_${store.nextId}`,\n      title,\n      description,\n      false,\n      'pending'\n    );\n  }\n  \n  execute(): void {\n    this.store.tasks.set(this.task.id, this.task);\n    this.store.nextId++;\n  }\n  \n  undo(): void {\n    this.store.tasks.delete(this.task.id);\n    this.store.nextId--;\n  }\n  \n  getDescription(): string {\n    return `Add task: ${this.task.title}`;\n  }\n  \n  getTaskId(): string {\n    return this.task.id;\n  }\n}\n\nexport class DeleteTaskCommand extends TaskCommand {\n  private taskId: string;\n  private deletedTask: TaskModel | null = null;\n  \n  constructor(store: TaskStoreState, taskId: string) {\n    super(store);\n    this.taskId = taskId;\n  }\n  \n  execute(): void {\n    this.deletedTask = this.store.tasks.get(this.taskId) || null;\n    this.store.tasks.delete(this.taskId);\n  }\n  \n  undo(): void {\n    if (this.deletedTask) {\n      this.store.tasks.set(this.taskId, this.deletedTask);\n    }\n  }\n  \n  getDescription(): string {\n    return `Delete task: ${this.deletedTask?.title || this.taskId}`;\n  }\n}\n\nexport class ToggleTaskCommand extends TaskCommand {\n  private taskId: string;\n  private originalTask: TaskModel | null = null;\n  \n  constructor(store: TaskStoreState, taskId: string) {\n    super(store);\n    this.taskId = taskId;\n  }\n  \n  execute(): void {\n    this.originalTask = this.store.tasks.get(this.taskId) || null;\n    if (this.originalTask) {\n      const toggledTask = this.originalTask.toggle();\n      this.store.tasks.set(this.taskId, toggledTask);\n    }\n  }\n  \n  undo(): void {\n    if (this.originalTask) {\n      this.store.tasks.set(this.taskId, this.originalTask);\n    }\n  }\n  \n  getDescription(): string {\n    const action = this.originalTask?.completed ? 'Mark incomplete' : 'Mark complete';\n    return `${action}: ${this.originalTask?.title || this.taskId}`;\n  }\n}\n\nexport class UpdateTaskTitleCommand extends TaskCommand {\n  private taskId: string;\n  private newTitle: string;\n  private originalTask: TaskModel | null = null;\n  \n  constructor(store: TaskStoreState, taskId: string, newTitle: string) {\n    super(store);\n    this.taskId = taskId;\n    this.newTitle = newTitle;\n  }\n  \n  execute(): void {\n    this.originalTask = this.store.tasks.get(this.taskId) || null;\n    if (this.originalTask) {\n      const updatedTask = this.originalTask.updateTitle(this.newTitle);\n      this.store.tasks.set(this.taskId, updatedTask);\n    }\n  }\n  \n  undo(): void {\n    if (this.originalTask) {\n      this.store.tasks.set(this.taskId, this.originalTask);\n    }\n  }\n  \n  getDescription(): string {\n    return `Update title: ${this.originalTask?.title || this.taskId} → ${this.newTitle}`;\n  }\n}\n\nexport class UpdateTaskDescriptionCommand extends TaskCommand {\n  private taskId: string;\n  private newDescription: string;\n  private originalTask: TaskModel | null = null;\n  \n  constructor(store: TaskStoreState, taskId: string, newDescription: string) {\n    super(store);\n    this.taskId = taskId;\n    this.newDescription = newDescription;\n  }\n  \n  execute(): void {\n    this.originalTask = this.store.tasks.get(this.taskId) || null;\n    if (this.originalTask) {\n      const updatedTask = this.originalTask.updateDescription(this.newDescription);\n      this.store.tasks.set(this.taskId, updatedTask);\n    }\n  }\n  \n  undo(): void {\n    if (this.originalTask) {\n      this.store.tasks.set(this.taskId, this.originalTask);\n    }\n  }\n  \n  getDescription(): string {\n    return `Update description: ${this.originalTask?.title || this.taskId}`;\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/stores/task-store.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":19,"column":51,"nodeType":"NewExpression","messageId":"complex","endLine":19,"endColumn":60},{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 1. Maximum allowed is 0.","line":22,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":25,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'execute' has a complexity of 1. Maximum allowed is 0.","line":27,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":36,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":29,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":35,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 1. Maximum allowed is 0.","line":38,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":42,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":39,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":41,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Method 'getDescription' has a complexity of 1. Maximum allowed is 0.","line":44,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":46,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":50,"column":44,"nodeType":"NewExpression","messageId":"complex","endLine":50,"endColumn":53},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":51,"column":41,"nodeType":"NewExpression","messageId":"complex","endLine":51,"endColumn":50},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":52,"column":29,"nodeType":"Literal","messageId":"complex","endLine":52,"endColumn":30},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":53,"column":60,"nodeType":"NewExpression","messageId":"complex","endLine":53,"endColumn":69},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":56,"column":34,"nodeType":"ArrayExpression","messageId":"complex","endLine":56,"endColumn":36},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":57,"column":36,"nodeType":"ArrayExpression","messageId":"complex","endLine":57,"endColumn":38},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":60,"column":34,"nodeType":"Literal","messageId":"complex","endLine":60,"endColumn":36},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":61,"column":37,"nodeType":"ArrayExpression","messageId":"complex","endLine":61,"endColumn":39},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":69,"column":7,"nodeType":"ObjectExpression","messageId":"complex","endLine":76,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Getter 'tasks' has a complexity of 1. Maximum allowed is 0.","line":79,"column":12,"nodeType":"FunctionExpression","messageId":"complex","endLine":79,"endColumn":62},{"ruleId":"complexity","severity":1,"message":"Getter 'nextId' has a complexity of 1. Maximum allowed is 0.","line":80,"column":13,"nodeType":"FunctionExpression","messageId":"complex","endLine":80,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Setter 'nextId' has a complexity of 1. Maximum allowed is 0.","line":81,"column":13,"nodeType":"FunctionExpression","messageId":"complex","endLine":81,"endColumn":54},{"ruleId":"complexity","severity":1,"message":"Getter 'searchQuery' has a complexity of 1. Maximum allowed is 0.","line":84,"column":18,"nodeType":"FunctionExpression","messageId":"complex","endLine":84,"endColumn":58},{"ruleId":"complexity","severity":1,"message":"Getter 'taskCounts' has a complexity of 1. Maximum allowed is 0.","line":87,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":87,"endColumn":55},{"ruleId":"complexity","severity":1,"message":"Method '_logTaskOperation' has a complexity of 1. Maximum allowed is 0.","line":89,"column":28,"nodeType":"FunctionExpression","messageId":"complex","endLine":92,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method '_executeCommand' has a complexity of 2. Maximum allowed is 0.","line":95,"column":26,"nodeType":"FunctionExpression","messageId":"complex","endLine":108,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'canUndo' has a complexity of 1. Maximum allowed is 0.","line":111,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":113,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'canRedo' has a complexity of 1. Maximum allowed is 0.","line":115,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":117,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'undo' has a complexity of 3. Maximum allowed is 0.","line":119,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":133,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'redo' has a complexity of 2. Maximum allowed is 0.","line":135,"column":7,"nodeType":"FunctionExpression","messageId":"complex","endLine":144,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getLastOperation' has a complexity of 2. Maximum allowed is 0.","line":146,"column":19,"nodeType":"FunctionExpression","messageId":"complex","endLine":149,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getNextRedoOperation' has a complexity of 2. Maximum allowed is 0.","line":151,"column":23,"nodeType":"FunctionExpression","messageId":"complex","endLine":154,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Async method '_syncTaskToAPI' has a complexity of 4. Maximum allowed is 0.","line":157,"column":31,"nodeType":"FunctionExpression","messageId":"complex","endLine":189,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method '_scheduleAutoSave' has a complexity of 2. Maximum allowed is 0.","line":191,"column":28,"nodeType":"FunctionExpression","messageId":"complex","endLine":208,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 0.","line":199,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":205,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Async method '_autoSaveTask' has a complexity of 2. Maximum allowed is 0.","line":210,"column":30,"nodeType":"FunctionExpression","messageId":"complex","endLine":221,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'addTask' has a complexity of 2. Maximum allowed is 0.","line":223,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":234,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'updateTaskTitle' has a complexity of 3. Maximum allowed is 0.","line":236,"column":18,"nodeType":"FunctionExpression","messageId":"complex","endLine":246,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'updateTaskDescription' has a complexity of 3. Maximum allowed is 0.","line":248,"column":24,"nodeType":"FunctionExpression","messageId":"complex","endLine":258,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'toggleTask' has a complexity of 2. Maximum allowed is 0.","line":260,"column":13,"nodeType":"FunctionExpression","messageId":"complex","endLine":270,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'deleteTask' has a complexity of 3. Maximum allowed is 0.","line":272,"column":13,"nodeType":"FunctionExpression","messageId":"complex","endLine":285,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Async method 'retrySyncTask' has a complexity of 3. Maximum allowed is 0.","line":288,"column":22,"nodeType":"FunctionExpression","messageId":"complex","endLine":293,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'setSearchQuery' has a complexity of 1. Maximum allowed is 0.","line":296,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":300,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method '_updateFilteredTasks' has a complexity of 2. Maximum allowed is 0.","line":302,"column":31,"nodeType":"FunctionExpression","messageId":"complex","endLine":322,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":303,"column":59,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":310,"endColumn":7},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":315,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":317,"endColumn":67},{"ruleId":"complexity","severity":1,"message":"Method '_updateTaskCounts' has a complexity of 1. Maximum allowed is 0.","line":324,"column":28,"nodeType":"FunctionExpression","messageId":"complex","endLine":335,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":329,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":329,"endColumn":50},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":330,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":330,"endColumn":63},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":331,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":331,"endColumn":61},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":332,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":332,"endColumn":63},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":333,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":333,"endColumn":59},{"ruleId":"complexity","severity":1,"message":"Method 'bulkDeleteTasks' has a complexity of 2. Maximum allowed is 0.","line":338,"column":18,"nodeType":"FunctionExpression","messageId":"complex","endLine":353,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":342,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":348,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Method 'bulkToggleTasks' has a complexity of 1. Maximum allowed is 0.","line":355,"column":18,"nodeType":"FunctionExpression","messageId":"complex","endLine":361,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":356,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":360,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Method 'getTasks' has a complexity of 1. Maximum allowed is 0.","line":364,"column":11,"nodeType":"FunctionExpression","messageId":"complex","endLine":366,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getAllTasks' has a complexity of 1. Maximum allowed is 0.","line":369,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":378,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":370,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":377,"endColumn":7},{"ruleId":"complexity","severity":1,"message":"Method 'subscribe' has a complexity of 1. Maximum allowed is 0.","line":380,"column":12,"nodeType":"FunctionExpression","messageId":"complex","endLine":383,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":382,"column":12,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":382,"endColumn":50},{"ruleId":"complexity","severity":1,"message":"Method '_generateId' has a complexity of 1. Maximum allowed is 0.","line":385,"column":22,"nodeType":"FunctionExpression","messageId":"complex","endLine":387,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method '_notifyListeners' has a complexity of 1. Maximum allowed is 0.","line":389,"column":27,"nodeType":"FunctionExpression","messageId":"complex","endLine":392,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":391,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":391,"endColumn":51},{"ruleId":"complexity","severity":1,"message":"Method 'cleanup' has a complexity of 1. Maximum allowed is 0.","line":395,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":398,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":396,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":396,"endColumn":68}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":63,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TaskModel, ITask, SyncStatus } from '../models/task';\nimport { \n  ICommand, \n  TaskStoreState, \n  AddTaskCommand, \n  DeleteTaskCommand, \n  ToggleTaskCommand, \n  UpdateTaskTitleCommand, \n  UpdateTaskDescriptionCommand \n} from './commands';\n\nconst API_BASE_URL = 'https://api.example.com/tasks';\nconst AUTO_SAVE_DEBOUNCE_MS = 1000; // 1 second debounce\nconst MAX_HISTORY_SIZE = 10; // Maximum number of operations to keep for undo\n\n// New: Bulk delete command for handling multiple tasks at once\nclass BulkDeleteCommand implements ICommand {\n  private _taskIds: string[];\n  private _deletedTasks: Map<string, TaskModel> = new Map();\n  private _store: TaskStore;\n\n  constructor(store: TaskStore, taskIds: string[]) {\n    this._store = store;\n    this._taskIds = taskIds;\n  }\n\n  execute(): void {\n    // Store deleted tasks for undo\n    this._taskIds.forEach(id => {\n      const task = this._store.tasks.get(id);\n      if (task) {\n        this._deletedTasks.set(id, task);\n        this._store.tasks.delete(id);\n      }\n    });\n  }\n\n  undo(): void {\n    this._deletedTasks.forEach((task, id) => {\n      this._store.tasks.set(id, task);\n    });\n  }\n\n  getDescription(): string {\n    return `Delete ${this._taskIds.length} tasks`;\n  }\n}\n\nexport class TaskStore implements TaskStoreState {\n  private _tasks: Map<string, TaskModel> = new Map();     \n  private _listeners: Set<() => void> = new Set();       \n  private _nextId: number = 1;\n  private _autoSaveTimeouts: Map<string, NodeJS.Timeout> = new Map();\n  \n  // Undo/Redo functionality\n  private _history: ICommand[] = [];\n  private _redoStack: ICommand[] = [];\n\n  // New: Search and filter state\n  private _searchQuery: string = '';\n  private _filteredTasks: ITask[] = [];\n  private _taskCounts: {\n    total: number;\n    completed: number;\n    pending: number;\n    synced: number;\n    syncing: number;\n    error: number;\n  } = {\n    total: 0,\n    completed: 0,\n    pending: 0,\n    synced: 0,\n    syncing: 0,\n    error: 0\n  };\n\n  // Expose state for commands\n  get tasks(): Map<string, TaskModel> { return this._tasks; }\n  get nextId(): number { return this._nextId; }\n  set nextId(value: number) { this._nextId = value; }\n\n  // New: Get search query\n  get searchQuery(): string { return this._searchQuery; }\n\n  // New: Get task counts\n  get taskCounts() { return { ...this._taskCounts }; }\n\n  private _logTaskOperation(action: string, taskId: string): void {\n    const timestamp = new Date().toISOString();\n    console.log(`[${timestamp}] Action: ${action} Task: ${taskId}`);\n  }\n\n  // Command execution with history management\n  private _executeCommand(command: ICommand): void {\n    command.execute();\n    \n    // Add to history and maintain max size\n    this._history.push(command);\n    if (this._history.length > MAX_HISTORY_SIZE) {\n      this._history.shift(); // Remove oldest command\n    }\n    \n    // Clear redo stack when new command is executed\n    this._redoStack = [];\n    \n    this._notifyListeners();\n  }\n\n  // Undo/Redo methods\n  canUndo(): boolean {\n    return this._history.length > 0;\n  }\n\n  canRedo(): boolean {\n    return this._redoStack.length > 0;\n  }\n\n  undo(): boolean {\n    if (!this.canUndo()) return false;\n    \n    const command = this._history.pop()!;\n    command.undo();\n    this._redoStack.push(command);\n    \n    // Maintain max redo stack size\n    if (this._redoStack.length > MAX_HISTORY_SIZE) {\n      this._redoStack.shift();\n    }\n    \n    this._notifyListeners();\n    return true;\n  }\n\n  redo(): boolean {\n    if (!this.canRedo()) return false;\n    \n    const command = this._redoStack.pop()!;\n    command.execute();\n    this._history.push(command);\n    \n    this._notifyListeners();\n    return true;\n  }\n\n  getLastOperation(): string | null {\n    if (this._history.length === 0) return null;\n    return this._history[this._history.length - 1].getDescription();\n  }\n\n  getNextRedoOperation(): string | null {\n    if (this._redoStack.length === 0) return null;\n    return this._redoStack[this._redoStack.length - 1].getDescription();\n  }\n\n  // API sync methods\n  private async _syncTaskToAPI(task: TaskModel): Promise<void> {\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          id: task.id,\n          title: task.title,\n          description: task.description,\n          completed: task.completed,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // Update sync status to synced\n      const syncedTask = task.withSyncStatus('synced');\n      this._tasks.set(task.id, syncedTask);\n      this._logTaskOperation('synced', task.id);\n      this._notifyListeners();\n    } catch (error) {\n      console.error('Sync failed:', error);\n      // Update sync status to error\n      const errorTask = task.withSyncStatus('error', error instanceof Error ? error.message : 'Sync failed');\n      this._tasks.set(task.id, errorTask);\n      this._logTaskOperation('sync_error', task.id);\n      this._notifyListeners();\n    }\n  }\n\n  private _scheduleAutoSave(taskId: string): void {\n    // Clear existing timeout for this task\n    const existingTimeout = this._autoSaveTimeouts.get(taskId);\n    if (existingTimeout) {\n      clearTimeout(existingTimeout);\n    }\n\n    // Schedule new auto-save\n    const timeout = setTimeout(() => {\n      const task = this._tasks.get(taskId);\n      if (task && task.syncStatus === 'pending') {\n        this._autoSaveTask(taskId);\n      }\n      this._autoSaveTimeouts.delete(taskId);\n    }, AUTO_SAVE_DEBOUNCE_MS);\n\n    this._autoSaveTimeouts.set(taskId, timeout);\n  }\n\n  private async _autoSaveTask(taskId: string): Promise<void> {\n    const task = this._tasks.get(taskId);\n    if (!task) return;\n\n    // Set syncing status\n    const syncingTask = task.withSyncStatus('syncing');\n    this._tasks.set(taskId, syncingTask);\n    this._logTaskOperation('auto_sync_start', taskId);\n    this._notifyListeners();\n\n    await this._syncTaskToAPI(syncingTask);\n  }\n\n  addTask(title: string, description: string = ''): ITask {\n    const command = new AddTaskCommand(this, title, description);\n    this._executeCommand(command);\n    \n    const taskId = (command as AddTaskCommand).getTaskId();\n    this._logTaskOperation('create', taskId);\n    \n    // Schedule auto-save for new task\n    this._scheduleAutoSave(taskId);\n    \n    return this._tasks.get(taskId)!; \n  }\n\n  updateTaskTitle(id: string, title: string): void {\n    const task = this._tasks.get(id);\n    if (task && task.title !== title) {\n      const command = new UpdateTaskTitleCommand(this, id, title);\n      this._executeCommand(command);\n      this._logTaskOperation('update_title', id);\n      \n      // Schedule auto-save\n      this._scheduleAutoSave(id);\n    }\n  }\n\n  updateTaskDescription(id: string, description: string): void {\n    const task = this._tasks.get(id);\n    if (task && task.description !== description) {\n      const command = new UpdateTaskDescriptionCommand(this, id, description);\n      this._executeCommand(command);\n      this._logTaskOperation('update_description', id);\n      \n      // Schedule auto-save\n      this._scheduleAutoSave(id);\n    }\n  }\n\n  toggleTask(id: string): void {\n    const task = this._tasks.get(id);\n    if (task) {\n      const command = new ToggleTaskCommand(this, id);\n      this._executeCommand(command);\n      this._logTaskOperation('toggle', id);\n      \n      // Schedule auto-save\n      this._scheduleAutoSave(id);\n    }\n  }\n\n  deleteTask(id: string): void {\n    if (this._tasks.has(id)) {\n      // Clear any pending auto-save\n      const existingTimeout = this._autoSaveTimeouts.get(id);\n      if (existingTimeout) {\n        clearTimeout(existingTimeout);\n        this._autoSaveTimeouts.delete(id);\n      }\n      \n      const command = new DeleteTaskCommand(this, id);\n      this._executeCommand(command);\n      this._logTaskOperation('delete', id);\n    }\n  }\n\n  // Manual sync for retry functionality\n  async retrySyncTask(id: string): Promise<void> {\n    const task = this._tasks.get(id);\n    if (task && task.syncStatus === 'error') {\n      await this._autoSaveTask(id);\n    }\n  }\n\n  // New: Search functionality with debouncing\n  setSearchQuery(query: string): void {\n    this._searchQuery = query.toLowerCase().trim();\n    this._updateFilteredTasks();\n    this._notifyListeners();\n  }\n\n  private _updateFilteredTasks(): void {\n    const allTasks = Array.from(this._tasks.values()).map(task => ({\n      id: task.id,\n      title: task.title,\n      description: task.description,\n      completed: task.completed,\n      syncStatus: task.syncStatus,\n      lastSyncError: task.lastSyncError\n    }));\n\n    if (!this._searchQuery) {\n      this._filteredTasks = allTasks;\n    } else {\n      this._filteredTasks = allTasks.filter(task => \n        task.title.toLowerCase().includes(this._searchQuery) ||\n        task.description.toLowerCase().includes(this._searchQuery)\n      );\n    }\n\n    this._updateTaskCounts();\n  }\n\n  private _updateTaskCounts(): void {\n    const allTasks = Array.from(this._tasks.values());\n    \n    this._taskCounts = {\n      total: allTasks.length,\n      completed: allTasks.filter(t => t.completed).length,\n      pending: allTasks.filter(t => t.syncStatus === 'pending').length,\n      synced: allTasks.filter(t => t.syncStatus === 'synced').length,\n      syncing: allTasks.filter(t => t.syncStatus === 'syncing').length,\n      error: allTasks.filter(t => t.syncStatus === 'error').length\n    };\n  }\n\n  // New: Bulk operations\n  bulkDeleteTasks(taskIds: string[]): void {\n    if (taskIds.length === 0) return;\n\n    // Clear any pending auto-saves for these tasks\n    taskIds.forEach(id => {\n      const existingTimeout = this._autoSaveTimeouts.get(id);\n      if (existingTimeout) {\n        clearTimeout(existingTimeout);\n        this._autoSaveTimeouts.delete(id);\n      }\n    });\n\n    const command = new BulkDeleteCommand(this, taskIds);\n    this._executeCommand(command);\n    this._logTaskOperation('bulk_delete', `${taskIds.length} tasks`);\n  }\n\n  bulkToggleTasks(taskIds: string[]): void {\n    taskIds.forEach(id => {\n      if (this._tasks.has(id)) {\n        this.toggleTask(id);\n      }\n    });\n  }\n\n  // Enhanced getTasks to return filtered results\n  getTasks(): ITask[] {\n    return [...this._filteredTasks];\n  }\n\n  // New: Get all tasks (unfiltered) for bulk operations\n  getAllTasks(): ITask[] {\n    return Array.from(this._tasks.values()).map(task => ({\n      id: task.id,\n      title: task.title,\n      description: task.description,\n      completed: task.completed,\n      syncStatus: task.syncStatus,\n      lastSyncError: task.lastSyncError\n    }));\n  }\n\n  subscribe(listener: () => void): () => void {\n    this._listeners.add(listener);\n    return () => this._listeners.delete(listener);\n  }\n\n  private _generateId(): string {\n    return `task_${this._nextId++}`;\n  }\n\n  private _notifyListeners(): void {\n    this._updateFilteredTasks();\n    this._listeners.forEach(listener => listener());\n  }\n\n  // Cleanup method for component unmount\n  cleanup(): void {\n    this._autoSaveTimeouts.forEach(timeout => clearTimeout(timeout));\n    this._autoSaveTimeouts.clear();\n  }\n}\n\nexport const taskStore = new TaskStore();","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/utils/populate-sample-data.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":55,"column":23,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":57,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 0.","line":59,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":74,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'populateSampleData' has a complexity of 8. Maximum allowed is 0.","line":76,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":120,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'clearAllTasks' has a complexity of 1. Maximum allowed is 0.","line":122,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":127,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'createTestScenarios' has a complexity of 1. Maximum allowed is 0.","line":130,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":147,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'createLargeDataset' has a complexity of 1. Maximum allowed is 0.","line":150,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":155,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { taskStore } from '../stores/task-store';\nimport { SyncStatus } from '../models/task';\n\nconst sampleTitles = [\n  'Review project requirements',\n  'Update documentation',\n  'Fix login bug',\n  'Implement user authentication',\n  'Design new dashboard',\n  'Optimize database queries',\n  'Write unit tests',\n  'Conduct code review',\n  'Deploy to staging',\n  'Update dependencies',\n  'Refactor legacy code',\n  'Create API endpoints',\n  'Implement search feature',\n  'Add error handling',\n  'Improve performance',\n  'Setup CI/CD pipeline',\n  'Configure monitoring',\n  'Update UI components',\n  'Add data validation',\n  'Implement caching',\n  'Create user manual',\n  'Fix responsive design',\n  'Add analytics tracking',\n  'Implement pagination',\n  'Setup backup system',\n  'Optimize images',\n  'Add keyboard shortcuts',\n  'Implement dark mode',\n  'Create admin panel',\n  'Add export feature'\n];\n\nconst sampleDescriptions = [\n  'This task requires careful attention to detail and thorough testing.',\n  'Make sure to follow the coding standards and best practices.',\n  'Consider the impact on existing functionality.',\n  'Coordinate with the design team for UI specifications.',\n  'Review the technical requirements before implementation.',\n  'Test on multiple browsers and devices.',\n  'Update the documentation after completion.',\n  'Consider performance implications.',\n  'Ensure backward compatibility.',\n  'Follow security best practices.',\n  '',\n  'This is a high priority item.',\n  'Low priority - can be done later.',\n  'Needs approval from stakeholders.',\n  'Complex task that may require multiple iterations.'\n];\n\nconst getRandomItem = <T>(array: T[]): T => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\nconst getRandomSyncStatus = (): SyncStatus => {\n  const statuses: SyncStatus[] = ['synced', 'syncing', 'error', 'pending'];\n  const weights = [0.6, 0.1, 0.1, 0.2]; // 60% synced, 10% syncing, 10% error, 20% pending\n  \n  const random = Math.random();\n  let cumulative = 0;\n  \n  for (let i = 0; i < statuses.length; i++) {\n    cumulative += weights[i];\n    if (random <= cumulative) {\n      return statuses[i];\n    }\n  }\n  \n  return 'pending';\n};\n\nexport function populateSampleData(count: number = 100): void {\n  console.log(`Adding ${count} sample tasks...`);\n  \n  const startTime = performance.now();\n  \n  for (let i = 0; i < count; i++) {\n    const title = `${getRandomItem(sampleTitles)} #${i + 1}`;\n    const description = getRandomItem(sampleDescriptions);\n    const completed = Math.random() < 0.3; // 30% chance of being completed\n    \n    // Add the task\n    const task = taskStore.addTask(title, description);\n    \n    // Randomly complete some tasks\n    if (completed) {\n      taskStore.toggleTask(task.id);\n    }\n    \n    // Simulate various sync statuses\n    const syncStatus = getRandomSyncStatus();\n    if (syncStatus !== 'pending') {\n      // Directly update the task in the store to simulate different sync states\n      const currentTask = taskStore.tasks.get(task.id);\n      if (currentTask) {\n        const updatedTask = currentTask.withSyncStatus(\n          syncStatus, \n          syncStatus === 'error' ? 'Network timeout error' : undefined\n        );\n        taskStore.tasks.set(task.id, updatedTask);\n      }\n    }\n    \n    // Log progress every 1000 tasks\n    if ((i + 1) % 1000 === 0) {\n      console.log(`Created ${i + 1} tasks...`);\n    }\n  }\n  \n  const endTime = performance.now();\n  console.log(`✅ Successfully created ${count} sample tasks in ${Math.round(endTime - startTime)}ms`);\n  console.log(`Performance: ${Math.round(count / ((endTime - startTime) / 1000))} tasks/second`);\n  \n  // Trigger a re-render to show the new tasks\n  taskStore['_notifyListeners']();\n}\n\nexport function clearAllTasks(): void {\n  console.log('Clearing all tasks...');\n  const taskIds = Array.from(taskStore.tasks.keys());\n  taskStore.bulkDeleteTasks(taskIds);\n  console.log('✅ All tasks cleared');\n}\n\n// Helper function to create specific test scenarios\nexport function createTestScenarios(): void {\n  console.log('Creating test scenarios...');\n  \n  // Clear existing tasks first\n  clearAllTasks();\n  \n  // Add some specific test cases\n  taskStore.addTask('🔍 Search Test - Performance Optimization', 'This task should be found when searching for \"performance\"');\n  taskStore.addTask('🔍 Search Test - Database Query', 'Another searchable task with \"database\" keyword');\n  taskStore.addTask('🎯 High Priority Task', 'This is a critical task that needs immediate attention');\n  taskStore.addTask('📝 Documentation Update', 'Update the user manual and API documentation');\n  taskStore.addTask('🐛 Bug Fix - Login Issue', 'Users cannot log in with special characters in password');\n  \n  // Add a batch of regular tasks\n  populateSampleData(95); // Total will be 100 tasks for quick testing\n  \n  console.log('✅ Test scenarios created with 100 sample tasks');\n}\n\n// Function to simulate a large dataset for performance testing\nexport function createLargeDataset(): void {\n  console.log('Creating large dataset for performance testing...');\n  clearAllTasks();\n  populateSampleData(10000);\n  console.log('✅ Large dataset created with 10,000 tasks');\n}\n\n// Make functions available globally for browser console testing\nif (typeof window !== 'undefined') {\n  (window as any).taskUtils = {\n    populateSampleData,\n    clearAllTasks,\n    createTestScenarios,\n    createLargeDataset\n  };\n  \n  console.log(`\n🔧 Task Utils Available:\n- taskUtils.createTestScenarios() - Create 100 sample tasks for testing\n- taskUtils.createLargeDataset() - Create 10,000 tasks for performance testing\n- taskUtils.populateSampleData(count) - Create specific number of tasks\n- taskUtils.clearAllTasks() - Remove all tasks\n  `);\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/views/task-view.tsx","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 16. Maximum allowed is 0.","line":17,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":685,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":36,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":38,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":41,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":43,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":45,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":65,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":46,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":58,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":61,"column":12,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":64,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 0.","line":68,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":77,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":69,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":69,"endColumn":62},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":70,"column":67,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":70,"endColumn":96},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":80,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":103,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 18. Maximum allowed is 0.","line":81,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":99,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":102,"column":12,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":102,"endColumn":72},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":105,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":112,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":114,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":116,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":118,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":120,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":122,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":126,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":128,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":130,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":132,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":134,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":136,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":138,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":140,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":142,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":145,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":151,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":149,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":149,"endColumn":57},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":153,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":161,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":163,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":168,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":170,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":175,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":177,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":185,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":178,"column":16,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":184,"endColumn":7},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":187,"column":23,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":195,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":188,"column":16,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":194,"endColumn":7},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 5. Maximum allowed is 0.","line":197,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":205,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 5. Maximum allowed is 0.","line":207,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":215,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 15. Maximum allowed is 0.","line":218,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":401,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":236,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":236,"endColumn":71},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":247,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":247,"endColumn":54},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":262,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":265,"endColumn":20},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 3. Maximum allowed is 0.","line":266,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":273,"endColumn":20},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":284,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":284,"endColumn":64},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":299,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":299,"endColumn":87},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":305,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":305,"endColumn":53},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":333,"column":23,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":336,"endColumn":16},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 4. Maximum allowed is 0.","line":337,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":344,"endColumn":16},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":361,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":361,"endColumn":68},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":380,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":380,"endColumn":66},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":448,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":448,"endColumn":58},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":463,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":463,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":596,"column":23,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":596,"endColumn":61},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":611,"column":23,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":611,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":47,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { taskStore } from '../stores/task-store';\nimport { SyncStatus, ITask } from '../models/task';\nimport { VirtualList } from './virtual-list';\nimport { useDebouncedSearch } from '../hooks/use-debounced-search';\n\ninterface EditingState {\n  [taskId: string]: {\n    title?: boolean;\n    description?: boolean;\n  };\n}\n\nconst ITEM_HEIGHT = 120; // Height per task item in pixels\nconst CONTAINER_HEIGHT = 600; // Height of virtual list container\n\nexport const TaskView: React.FC = () => {\n  const [tasks, setTasks] = useState(taskStore.getTasks());\n  const [allTasks, setAllTasks] = useState(taskStore.getAllTasks());\n  const [newTaskTitle, setNewTaskTitle] = useState('');\n  const [newTaskDescription, setNewTaskDescription] = useState('');\n  const [editing, setEditing] = useState<EditingState>({});\n  const [canUndo, setCanUndo] = useState(taskStore.canUndo());\n  const [canRedo, setCanRedo] = useState(taskStore.canRedo());\n  const [lastOperation, setLastOperation] = useState(taskStore.getLastOperation());\n  const [nextRedoOperation, setNextRedoOperation] = useState(taskStore.getNextRedoOperation());\n  const [taskCounts, setTaskCounts] = useState(taskStore.taskCounts);\n  \n  // Search functionality\n  const [searchInput, searchQuery, setSearchInput] = useDebouncedSearch('', 300);\n  \n  // Bulk selection state\n  const [selectedTasks, setSelectedTasks] = useState<Set<string>>(new Set());\n  const [selectAll, setSelectAll] = useState(false);\n  \n  const _isValidTitle = (title: string): boolean => {\n    return title.trim().length > 0 && title.trim().length < 100;\n  };\n\n  // Update search query in store when debounced value changes\n  useEffect(() => {\n    taskStore.setSearchQuery(searchQuery);\n  }, [searchQuery]);\n\n  useEffect(() => {\n    const unsubscribe = taskStore.subscribe(() => {\n      setTasks(taskStore.getTasks());\n      setAllTasks(taskStore.getAllTasks());\n      setCanUndo(taskStore.canUndo());\n      setCanRedo(taskStore.canRedo());\n      setLastOperation(taskStore.getLastOperation());\n      setNextRedoOperation(taskStore.getNextRedoOperation());\n      setTaskCounts(taskStore.taskCounts);\n      \n      // Clear selection if tasks change\n      setSelectedTasks(new Set());\n      setSelectAll(false);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      unsubscribe();\n      taskStore.cleanup();\n    };\n  }, []);\n\n  // Handle select all checkbox\n  useEffect(() => {\n    const filteredTaskIds = new Set(tasks.map(task => task.id));\n    const selectedFromFiltered = Array.from(selectedTasks).filter(id => filteredTaskIds.has(id));\n    \n    if (selectedFromFiltered.length === tasks.length && tasks.length > 0) {\n      setSelectAll(true);\n    } else {\n      setSelectAll(false);\n    }\n  }, [selectedTasks, tasks]);\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === 'z' && !e.shiftKey) {\n        e.preventDefault();\n        if (taskStore.canUndo()) {\n          taskStore.undo();\n        }\n      } else if ((e.metaKey || e.ctrlKey) && (e.key === 'y' || (e.key === 'z' && e.shiftKey))) {\n        e.preventDefault();\n        if (taskStore.canRedo()) {\n          taskStore.redo();\n        }\n      } else if ((e.metaKey || e.ctrlKey) && e.key === 'a' && !e.shiftKey) {\n        e.preventDefault();\n        handleSelectAll();\n      } else if (e.key === 'Delete' && selectedTasks.size > 0) {\n        e.preventDefault();\n        handleBulkDelete();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [selectedTasks]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (_isValidTitle(newTaskTitle)) {\n      taskStore.addTask(newTaskTitle.trim(), newTaskDescription.trim());\n      setNewTaskTitle('');\n      setNewTaskDescription('');\n    }\n  };\n\n  const handleToggle = (id: string) => {\n    taskStore.toggleTask(id);\n  };\n\n  const handleDelete = (id: string) => {\n    taskStore.deleteTask(id);\n  };\n\n  const handleTitleEdit = (id: string, newTitle: string) => {\n    if (_isValidTitle(newTitle)) {\n      taskStore.updateTaskTitle(id, newTitle);\n    }\n  };\n\n  const handleDescriptionEdit = (id: string, newDescription: string) => {\n    taskStore.updateTaskDescription(id, newDescription);\n  };\n\n  const handleRetrySync = (id: string) => {\n    taskStore.retrySyncTask(id);\n  };\n\n  const handleUndo = () => {\n    taskStore.undo();\n  };\n\n  const handleRedo = () => {\n    taskStore.redo();\n  };\n\n  // Bulk operations\n  const handleSelectAll = () => {\n    if (selectAll) {\n      setSelectedTasks(new Set());\n    } else {\n      setSelectedTasks(new Set(tasks.map(task => task.id)));\n    }\n  };\n\n  const handleTaskSelect = (taskId: string, selected: boolean) => {\n    const newSelected = new Set(selectedTasks);\n    if (selected) {\n      newSelected.add(taskId);\n    } else {\n      newSelected.delete(taskId);\n    }\n    setSelectedTasks(newSelected);\n  };\n\n  const handleBulkDelete = () => {\n    if (selectedTasks.size > 0) {\n      taskStore.bulkDeleteTasks(Array.from(selectedTasks));\n      setSelectedTasks(new Set());\n    }\n  };\n\n  const handleBulkToggle = () => {\n    if (selectedTasks.size > 0) {\n      taskStore.bulkToggleTasks(Array.from(selectedTasks));\n      setSelectedTasks(new Set());\n    }\n  };\n\n  const startEditing = (taskId: string, field: 'title' | 'description') => {\n    setEditing(prev => ({\n      ...prev,\n      [taskId]: {\n        ...prev[taskId],\n        [field]: true\n      }\n    }));\n  };\n\n  const stopEditing = (taskId: string, field: 'title' | 'description') => {\n    setEditing(prev => ({\n      ...prev,\n      [taskId]: {\n        ...prev[taskId],\n        [field]: false\n      }\n    }));\n  };\n\n  const getSyncStatusIcon = (syncStatus?: SyncStatus): string => {\n    switch (syncStatus) {\n      case 'synced': return '✅';\n      case 'syncing': return '🔄';\n      case 'error': return '❌';\n      case 'pending': return '⏳';\n      default: return '⏳';\n    }\n  };\n\n  const getSyncStatusColor = (syncStatus?: SyncStatus): string => {\n    switch (syncStatus) {\n      case 'synced': return '#28a745';\n      case 'syncing': return '#007bff';\n      case 'error': return '#dc3545';\n      case 'pending': return '#ffc107';\n      default: return '#ffc107';\n    }\n  };\n\n  // Virtual list item renderer\n  const renderTaskItem = useCallback((task: ITask, index: number) => {\n    const isSelected = selectedTasks.has(task.id);\n    \n    return (\n      <div style={{ \n        width: '100%',\n        padding: '10px',\n        borderBottom: '1px solid #eee',\n        borderLeft: `4px solid ${getSyncStatusColor(task.syncStatus)}`,\n        backgroundColor: isSelected ? '#e3f2fd' : 'white',\n        display: 'flex',\n        alignItems: 'flex-start',\n        gap: '10px'\n      }}>\n        {/* Bulk selection checkbox */}\n        <input\n          type=\"checkbox\"\n          checked={isSelected}\n          onChange={(e) => handleTaskSelect(task.id, e.target.checked)}\n          style={{ marginTop: '2px' }}\n        />\n        \n        {/* Task content */}\n        <div style={{ flex: 1 }}>\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n            <label style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\n              <input\n                type=\"checkbox\"\n                checked={task.completed}\n                onChange={() => handleToggle(task.id)}\n                style={{ marginRight: '8px' }}\n              />\n              \n              {editing[task.id]?.title ? (\n                <input\n                  type=\"text\"\n                  defaultValue={task.title}\n                  style={{\n                    fontWeight: 'bold',\n                    border: '1px solid #ddd',\n                    borderRadius: '3px',\n                    padding: '2px 4px',\n                    flex: 1\n                  }}\n                  onBlur={(e) => {\n                    handleTitleEdit(task.id, e.target.value);\n                    stopEditing(task.id, 'title');\n                  }}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      handleTitleEdit(task.id, e.currentTarget.value);\n                      stopEditing(task.id, 'title');\n                    } else if (e.key === 'Escape') {\n                      stopEditing(task.id, 'title');\n                    }\n                  }}\n                  autoFocus\n                />\n              ) : (\n                <span \n                  style={{\n                    textDecoration: task.completed ? 'line-through' : 'none',\n                    fontWeight: 'bold',\n                    cursor: 'pointer',\n                    flex: 1\n                  }}\n                  onClick={() => startEditing(task.id, 'title')}\n                  title=\"Click to edit\"\n                >\n                  {task.title}\n                </span>\n              )}\n            </label>\n            \n            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n              <span \n                style={{ \n                  fontSize: '16px',\n                  cursor: task.syncStatus === 'error' ? 'pointer' : 'default'\n                }}\n                title={task.syncStatus === 'error' ? `Error: ${task.lastSyncError}. Click to retry.` : `Status: ${task.syncStatus}`}\n                onClick={() => task.syncStatus === 'error' && handleRetrySync(task.id)}\n              >\n                {getSyncStatusIcon(task.syncStatus)}\n              </span>\n              \n              <button \n                onClick={() => handleDelete(task.id)}\n                style={{\n                  backgroundColor: '#ff4444',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '3px',\n                  padding: '4px 8px',\n                  fontSize: '12px',\n                  cursor: 'pointer'\n                }}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n          \n          {editing[task.id]?.description ? (\n            <textarea\n              defaultValue={task.description}\n              style={{\n                marginTop: '5px',\n                marginLeft: '24px',\n                width: 'calc(100% - 24px)',\n                minHeight: '40px',\n                border: '1px solid #ddd',\n                borderRadius: '3px',\n                padding: '4px'\n              }}\n              onBlur={(e) => {\n                handleDescriptionEdit(task.id, e.target.value);\n                stopEditing(task.id, 'description');\n              }}\n              onKeyDown={(e) => {\n                if (e.key === 'Escape') {\n                  stopEditing(task.id, 'description');\n                } else if (e.key === 'Enter' && e.ctrlKey) {\n                  handleDescriptionEdit(task.id, e.currentTarget.value);\n                  stopEditing(task.id, 'description');\n                }\n              }}\n              autoFocus\n            />\n          ) : (\n            task.description && (\n              <div \n                style={{\n                  marginTop: '5px',\n                  marginLeft: '24px',\n                  color: '#666',\n                  fontSize: '14px',\n                  textDecoration: task.completed ? 'line-through' : 'none',\n                  cursor: 'pointer',\n                  padding: '2px 4px',\n                  borderRadius: '3px',\n                  backgroundColor: '#f8f9fa'\n                }}\n                onClick={() => startEditing(task.id, 'description')}\n                title=\"Click to edit\"\n              >\n                {task.description}\n              </div>\n            )\n          )}\n          \n          {!task.description && !editing[task.id]?.description && (\n            <div \n              style={{\n                marginTop: '5px',\n                marginLeft: '24px',\n                color: '#999',\n                fontSize: '14px',\n                fontStyle: 'italic',\n                cursor: 'pointer',\n                padding: '2px 4px'\n              }}\n              onClick={() => startEditing(task.id, 'description')}\n              title=\"Click to add description\"\n            >\n              + Add description\n            </div>\n          )}\n\n          {task.syncStatus === 'error' && (\n            <div style={{\n              marginTop: '5px',\n              marginLeft: '24px',\n              color: '#dc3545',\n              fontSize: '12px',\n              fontStyle: 'italic'\n            }}>\n              Sync failed: {task.lastSyncError}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }, [editing, selectedTasks]);\n\n  return (\n    <div className=\"task-view\" style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>\n      <h1>Task Manager - Handle 10,000+ Tasks</h1>\n      \n      {/* Task counts */}\n      <div style={{ \n        display: 'flex', \n        gap: '20px', \n        marginBottom: '20px',\n        padding: '15px',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '8px',\n        flexWrap: 'wrap'\n      }}>\n        <div style={{ textAlign: 'center' }}>\n          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#007bff' }}>{taskCounts.total}</div>\n          <div style={{ fontSize: '12px', color: '#6c757d' }}>Total</div>\n        </div>\n        <div style={{ textAlign: 'center' }}>\n          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#28a745' }}>{taskCounts.completed}</div>\n          <div style={{ fontSize: '12px', color: '#6c757d' }}>Completed</div>\n        </div>\n        <div style={{ textAlign: 'center' }}>\n          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#28a745' }}>{taskCounts.synced}</div>\n          <div style={{ fontSize: '12px', color: '#6c757d' }}>Synced</div>\n        </div>\n        <div style={{ textAlign: 'center' }}>\n          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#ffc107' }}>{taskCounts.pending}</div>\n          <div style={{ fontSize: '12px', color: '#6c757d' }}>Pending</div>\n        </div>\n        <div style={{ textAlign: 'center' }}>\n          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#007bff' }}>{taskCounts.syncing}</div>\n          <div style={{ fontSize: '12px', color: '#6c757d' }}>Syncing</div>\n        </div>\n        <div style={{ textAlign: 'center' }}>\n          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#dc3545' }}>{taskCounts.error}</div>\n          <div style={{ fontSize: '12px', color: '#6c757d' }}>Errors</div>\n        </div>\n      </div>\n\n      {/* Search bar */}\n      <div style={{ marginBottom: '20px' }}>\n        <input\n          type=\"text\"\n          value={searchInput}\n          onChange={(e) => setSearchInput(e.target.value)}\n          placeholder=\"Search tasks by title or description...\"\n          style={{\n            width: '100%',\n            padding: '12px 16px',\n            fontSize: '16px',\n            border: '2px solid #ddd',\n            borderRadius: '8px',\n            outline: 'none'\n          }}\n        />\n        {searchQuery && (\n          <div style={{ fontSize: '14px', color: '#666', marginTop: '4px' }}>\n            Found {tasks.length} task{tasks.length !== 1 ? 's' : ''} matching \"{searchQuery}\"\n            <button \n              onClick={() => setSearchInput('')}\n              style={{ \n                marginLeft: '8px', \n                background: 'none', \n                border: 'none', \n                color: '#007bff', \n                cursor: 'pointer' \n              }}\n            >\n              Clear\n            </button>\n          </div>\n        )}\n      </div>\n      \n      {/* Undo/Redo Controls */}\n      <div style={{ \n        marginBottom: '20px', \n        padding: '10px', \n        backgroundColor: '#f8f9fa', \n        borderRadius: '5px',\n        display: 'flex',\n        gap: '10px',\n        alignItems: 'center'\n      }}>\n        <button \n          onClick={handleUndo}\n          disabled={!canUndo}\n          style={{\n            backgroundColor: canUndo ? '#007bff' : '#6c757d',\n            color: 'white',\n            border: 'none',\n            borderRadius: '3px',\n            padding: '6px 12px',\n            fontSize: '14px',\n            cursor: canUndo ? 'pointer' : 'not-allowed'\n          }}\n          title={lastOperation ? `Undo: ${lastOperation}` : 'Nothing to undo'}\n        >\n          ↶ Undo\n        </button>\n        \n        <button \n          onClick={handleRedo}\n          disabled={!canRedo}\n          style={{\n            backgroundColor: canRedo ? '#28a745' : '#6c757d',\n            color: 'white',\n            border: 'none',\n            borderRadius: '3px',\n            padding: '6px 12px',\n            fontSize: '14px',\n            cursor: canRedo ? 'pointer' : 'not-allowed'\n          }}\n          title={nextRedoOperation ? `Redo: ${nextRedoOperation}` : 'Nothing to redo'}\n        >\n          ↷ Redo\n        </button>\n        \n        {lastOperation && (\n          <span style={{ fontSize: '12px', color: '#6c757d' }}>\n            Last: {lastOperation}\n          </span>\n        )}\n      </div>\n\n      {/* Bulk operations */}\n      {tasks.length > 0 && (\n        <div style={{ \n          marginBottom: '20px', \n          padding: '10px', \n          backgroundColor: '#fff3cd', \n          borderRadius: '5px',\n          display: 'flex',\n          gap: '10px',\n          alignItems: 'center',\n          flexWrap: 'wrap'\n        }}>\n          <label style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n            <input\n              type=\"checkbox\"\n              checked={selectAll}\n              onChange={handleSelectAll}\n            />\n            Select All ({tasks.length} tasks)\n          </label>\n          \n          {selectedTasks.size > 0 && (\n            <>\n              <span style={{ color: '#856404' }}>\n                {selectedTasks.size} selected\n              </span>\n              \n              <button \n                onClick={handleBulkToggle}\n                style={{\n                  backgroundColor: '#007bff',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '3px',\n                  padding: '6px 12px',\n                  fontSize: '14px',\n                  cursor: 'pointer'\n                }}\n              >\n                Toggle Selected\n              </button>\n              \n              <button \n                onClick={handleBulkDelete}\n                style={{\n                  backgroundColor: '#dc3545',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '3px',\n                  padding: '6px 12px',\n                  fontSize: '14px',\n                  cursor: 'pointer'\n                }}\n              >\n                Delete Selected\n              </button>\n            </>\n          )}\n        </div>\n      )}\n      \n      {/* Add new task form */}\n      <form onSubmit={handleSubmit} style={{ marginBottom: '20px' }}>\n        <div style={{ marginBottom: '10px' }}>\n          <input\n            type=\"text\"\n            value={newTaskTitle}\n            onChange={(e) => setNewTaskTitle(e.target.value)}\n            placeholder=\"Add a new task...\"\n            required\n            style={{\n              width: '100%',\n              padding: '10px',\n              fontSize: '16px',\n              border: '1px solid #ddd',\n              borderRadius: '5px'\n            }}\n          />\n        </div>\n        <div style={{ marginBottom: '10px' }}>\n          <textarea\n            value={newTaskDescription}\n            onChange={(e) => setNewTaskDescription(e.target.value)}\n            placeholder=\"Task description (optional)...\"\n            rows={3}\n            style={{\n              width: '100%',\n              padding: '10px',\n              fontSize: '14px',\n              border: '1px solid #ddd',\n              borderRadius: '5px',\n              resize: 'vertical'\n            }}\n          />\n        </div>\n        <button \n          type=\"submit\"\n          style={{\n            backgroundColor: '#28a745',\n            color: 'white',\n            border: 'none',\n            borderRadius: '5px',\n            padding: '10px 20px',\n            fontSize: '16px',\n            cursor: 'pointer'\n          }}\n        >\n          Add Task\n        </button>\n      </form>\n\n      {/* Virtual list for tasks */}\n      <div>\n        <h3>\n          Tasks ({tasks.length} {searchQuery ? 'filtered' : 'total'})\n          {searchQuery && (\n            <span style={{ fontWeight: 'normal', color: '#666' }}>\n              {' '}from {taskCounts.total} total\n            </span>\n          )}\n        </h3>\n        \n        {tasks.length === 0 ? (\n          <div style={{ \n            textAlign: 'center', \n            padding: '40px', \n            color: '#666',\n            backgroundColor: '#f8f9fa',\n            borderRadius: '8px'\n          }}>\n            {searchQuery ? `No tasks found matching \"${searchQuery}\"` : 'No tasks yet. Add one above!'}\n          </div>\n        ) : (\n          <VirtualList\n            items={tasks}\n            itemHeight={ITEM_HEIGHT}\n            containerHeight={CONTAINER_HEIGHT}\n            renderItem={renderTaskItem}\n          />\n        )}\n      </div>\n      \n      {/* Keyboard shortcuts help */}\n      <div style={{ \n        marginTop: '20px', \n        padding: '10px', \n        backgroundColor: '#e9ecef', \n        borderRadius: '5px',\n        fontSize: '12px',\n        color: '#6c757d'\n      }}>\n        <strong>Keyboard shortcuts:</strong> \n        Ctrl/Cmd+Z (Undo), Ctrl/Cmd+Y (Redo), Ctrl/Cmd+A (Select All), Delete (Delete Selected)\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/views/virtual-list.tsx","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'VirtualList' has a complexity of 2. Maximum allowed is 0.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":79,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":30,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":32,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":35,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":40,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":63,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":74,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\n\ninterface VirtualListProps<T> {\n  items: T[];\n  itemHeight: number;\n  containerHeight: number;\n  renderItem: (item: T, index: number) => React.ReactNode;\n  overscan?: number; // Number of items to render outside visible area\n}\n\nexport function VirtualList<T>({ \n  items, \n  itemHeight, \n  containerHeight, \n  renderItem, \n  overscan = 5 \n}: VirtualListProps<T>) {\n  const [scrollTop, setScrollTop] = useState(0);\n  const scrollElementRef = useRef<HTMLDivElement>(null);\n\n  const totalHeight = items.length * itemHeight;\n  const startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);\n  const endIndex = Math.min(\n    items.length - 1,\n    Math.floor((scrollTop + containerHeight) / itemHeight) + overscan\n  );\n\n  const visibleItems = items.slice(startIndex, endIndex + 1);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {\n    setScrollTop(e.currentTarget.scrollTop);\n  }, []);\n\n  // Auto-scroll to top when items change significantly (e.g., search)\n  useEffect(() => {\n    if (scrollElementRef.current) {\n      scrollElementRef.current.scrollTop = 0;\n      setScrollTop(0);\n    }\n  }, [items.length]);\n\n  return (\n    <div\n      ref={scrollElementRef}\n      style={{\n        height: containerHeight,\n        overflow: 'auto',\n        border: '1px solid #ddd',\n        borderRadius: '5px'\n      }}\n      onScroll={handleScroll}\n    >\n      {/* Total height spacer */}\n      <div style={{ height: totalHeight, position: 'relative' }}>\n        {/* Visible items container */}\n        <div\n          style={{\n            position: 'absolute',\n            top: startIndex * itemHeight,\n            width: '100%'\n          }}\n        >\n          {visibleItems.map((item, index) => (\n            <div\n              key={startIndex + index}\n              style={{\n                height: itemHeight,\n                display: 'flex',\n                alignItems: 'center'\n              }}\n            >\n              {renderItem(item, startIndex + index)}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]}]
