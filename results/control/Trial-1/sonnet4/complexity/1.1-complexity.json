[{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/app.tsx","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":4,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":8,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { TaskView } from './views/task-view';\n\nexport const App: React.FC = () => {\n  return (\n    <TaskView />\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/models/task.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Constructor has a complexity of 3. Maximum allowed is 0.","line":14,"column":16,"nodeType":"FunctionExpression","messageId":"complex","endLine":19,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Getter 'id' has a complexity of 1. Maximum allowed is 0.","line":21,"column":11,"nodeType":"FunctionExpression","messageId":"complex","endLine":21,"endColumn":42},{"ruleId":"complexity","severity":1,"message":"Getter 'title' has a complexity of 1. Maximum allowed is 0.","line":22,"column":14,"nodeType":"FunctionExpression","messageId":"complex","endLine":22,"endColumn":48},{"ruleId":"complexity","severity":1,"message":"Getter 'description' has a complexity of 1. Maximum allowed is 0.","line":23,"column":20,"nodeType":"FunctionExpression","messageId":"complex","endLine":23,"endColumn":60},{"ruleId":"complexity","severity":1,"message":"Getter 'completed' has a complexity of 1. Maximum allowed is 0.","line":24,"column":18,"nodeType":"FunctionExpression","messageId":"complex","endLine":24,"endColumn":57},{"ruleId":"complexity","severity":1,"message":"Method 'toggle' has a complexity of 1. Maximum allowed is 0.","line":26,"column":11,"nodeType":"FunctionExpression","messageId":"complex","endLine":28,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ITask {\n    id: string;\n    title: string;\n    description: string;\n    completed: boolean;\n  }\n  \n  export class TaskModel implements ITask {\n    private _id: string;          \n    private _title: string;       \n    private _description: string;\n    private _completed: boolean;  \n    \n    constructor(id: string, title: string, description: string = '', completed: boolean = false) {\n      this._id = id;\n      this._title = title;\n      this._description = description;\n      this._completed = completed;\n    }\n    \n    get id(): string { return this._id; }\n    get title(): string { return this._title; }\n    get description(): string { return this._description; }\n    get completed(): boolean { return this._completed; }\n    \n    toggle(): TaskModel {\n      return new TaskModel(this._id, this._title, this._description, !this._completed);\n    }\n  }","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/stores/task-store.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":4,"column":44,"nodeType":"NewExpression","messageId":"complex","endLine":4,"endColumn":53},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":5,"column":41,"nodeType":"NewExpression","messageId":"complex","endLine":5,"endColumn":50},{"ruleId":"complexity","severity":1,"message":"Class field initializer has a complexity of 1. Maximum allowed is 0.","line":6,"column":29,"nodeType":"Literal","messageId":"complex","endLine":6,"endColumn":30},{"ruleId":"complexity","severity":1,"message":"Method 'addTask' has a complexity of 2. Maximum allowed is 0.","line":8,"column":10,"nodeType":"FunctionExpression","messageId":"complex","endLine":18,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'toggleTask' has a complexity of 2. Maximum allowed is 0.","line":20,"column":13,"nodeType":"FunctionExpression","messageId":"complex","endLine":26,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method 'getTasks' has a complexity of 1. Maximum allowed is 0.","line":28,"column":11,"nodeType":"FunctionExpression","messageId":"complex","endLine":35,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":29,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":34,"endColumn":7},{"ruleId":"complexity","severity":1,"message":"Method 'subscribe' has a complexity of 1. Maximum allowed is 0.","line":37,"column":12,"nodeType":"FunctionExpression","messageId":"complex","endLine":40,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":39,"column":12,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":39,"endColumn":50},{"ruleId":"complexity","severity":1,"message":"Method '_generateId' has a complexity of 1. Maximum allowed is 0.","line":42,"column":22,"nodeType":"FunctionExpression","messageId":"complex","endLine":44,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Method '_notifyListeners' has a complexity of 1. Maximum allowed is 0.","line":46,"column":27,"nodeType":"FunctionExpression","messageId":"complex","endLine":48,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":47,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":47,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TaskModel, ITask } from '../models/task';\n\nexport class TaskStore {\n  private _tasks: Map<string, TaskModel> = new Map();     \n  private _listeners: Set<() => void> = new Set();       \n  private _nextId: number = 1;                           \n\n  addTask(title: string, description: string = ''): ITask {\n    const task = new TaskModel(\n      this._generateId(),  \n      title,\n      description,\n      false\n    );\n    this._tasks.set(task.id, task);\n    this._notifyListeners();\n    return task; \n  }\n\n  toggleTask(id: string): void {\n    const task = this._tasks.get(id);\n    if (task) {\n      this._tasks.set(id, task.toggle());\n      this._notifyListeners();\n    }\n  }\n\n  getTasks(): ITask[] {\n    return Array.from(this._tasks.values()).map(task => ({\n      id: task.id,\n      title: task.title,\n      description: task.description,\n      completed: task.completed\n    }));\n  }\n\n  subscribe(listener: () => void): () => void {\n    this._listeners.add(listener);\n    return () => this._listeners.delete(listener);\n  }\n\n  private _generateId(): string {\n    return `task_${this._nextId++}`;\n  }\n\n  private _notifyListeners(): void {\n    this._listeners.forEach(listener => listener());\n  }\n}\n\nexport const taskStore = new TaskStore();","usedDeprecatedRules":[]},{"filePath":"/Users/mercury/Projects/RubricDSL/demo/src/views/task-view.tsx","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":4,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":85,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":9,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":11,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":13,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":17,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":14,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":16,"endColumn":6},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 2. Maximum allowed is 0.","line":19,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":26,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":28,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":30,"endColumn":4},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":40,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":40,"endColumn":59},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":45,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":45,"endColumn":65},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 4. Maximum allowed is 0.","line":53,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":81,"endColumn":10},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 1. Maximum allowed is 0.","line":59,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":59,"endColumn":54}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { taskStore } from '../stores/task-store';\n\nexport const TaskView: React.FC = () => {\n  const [tasks, setTasks] = useState(taskStore.getTasks());\n  const [newTaskTitle, setNewTaskTitle] = useState('');\n  const [newTaskDescription, setNewTaskDescription] = useState('');\n  \n  const _isValidTitle = (title: string): boolean => {\n    return title.trim().length > 0 && title.trim().length < 100;\n  };\n\n  useEffect(() => {\n    return taskStore.subscribe(() => {\n      setTasks(taskStore.getTasks());\n    });\n  }, []);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (_isValidTitle(newTaskTitle)) {\n      taskStore.addTask(newTaskTitle.trim(), newTaskDescription.trim());\n      setNewTaskTitle('');\n      setNewTaskDescription('');\n    }\n  };\n\n  const handleToggle = (id: string) => {\n    taskStore.toggleTask(id);\n  };\n\n  return (\n    <div className=\"task-view\">\n      <h1>Tasks</h1>\n      \n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={newTaskTitle}\n          onChange={(e) => setNewTaskTitle(e.target.value)}\n          placeholder=\"Add a new task...\"\n        />\n        <textarea\n          value={newTaskDescription}\n          onChange={(e) => setNewTaskDescription(e.target.value)}\n          placeholder=\"Task description (optional)...\"\n          rows={2}\n        />\n        <button type=\"submit\">Add</button>\n      </form>\n\n      <ul>\n        {tasks.map(task => (\n          <li key={task.id}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={task.completed}\n                onChange={() => handleToggle(task.id)}\n              />\n              <div>\n                <span style={{\n                  textDecoration: task.completed ? 'line-through' : 'none',\n                  fontWeight: 'bold'\n                }}>\n                  {task.title}\n                </span>\n                {task.description && (\n                  <div style={{\n                    fontSize: '0.9em',\n                    color: '#666',\n                    marginTop: '4px',\n                    textDecoration: task.completed ? 'line-through' : 'none'\n                  }}>\n                    {task.description}\n                  </div>\n                )}\n              </div>\n            </label>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};","usedDeprecatedRules":[]}]
